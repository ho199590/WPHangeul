%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 0422.eps
%%Creator: Adobe Illustrator(R) 22.1
%%For: ilya chaluk
%%CreationDate: 3/26/2018
%%BoundingBox: 0 0 170 150
%%HiResBoundingBox: 0 0 170 150
%%CropBox: 0 0 170 150
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.1.0 x312 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=0 RasterRes=1 GradRes=1 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161356, 2017/09/07-01:11:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2018-03-26T11:35:21+06:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-03-26T11:35:21+06:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-03-26T11:35:21+06:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 22.1 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>228</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEJYAlgAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAJYAAAAAEA&#xA;AQlgAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgA5AEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqtEkZT1AwKAE8qilB13w0bp&#xA;Fjmt+tW3Ph6yc6048hWvhTDwS50jjHK15dAxUsAwHIiu9PHBRTamt3aswVZo2Y7ABgSfxyRxyHQo&#xA;E496oHQsyhgWX7QB3FelcjSbWxzwSMVjkV2HUKwJ/DCYkcwgSB5FfkWTsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdiriQBUmg8cVW+tF/Ov3jFXetF/Ov3jFW1dG+ywPyNcVbxV2KuxV2KuxV2KuxV55&#xA;dW8y6lP5FVT9Uv7sXyMAQq6bIWmuYweg/foY6eDjOhhMGA1X8UY8P+eNon/Sm/8ANdFOJ4zpv4ZS&#xA;4v8AM5yH+m2+KnosGk/pzUZJY9F+tpqtyYXugn14OJP3fAnfZqcclqJZPCiAcvD4ceV8PLe/0scE&#xA;YeJInwuLxJc/q57fsXeXE8jHT9NbU/SfzRJOq3vOpv2vWPGVJAn70x1rUH4OHXbBqzquOXBfgVt/&#xA;M4eldL/2V+adKNNwx468a9/53F1vrX2V5Ksvl3ToNS81NpGl2keo2lpBJpRjgiDRTmGUq0VF+Fiw&#xA;HTvkI6ucoYfEnLglI8W53Fjn5MpaWAnl8OEeKMRw7DY0eSHtF8qpJ5cbyw0R1p7iL60YSDctbkf6&#xA;Z9cp8R26+p+3SmWTOcjL49+Hwmr+ni/g4P2dGEBgBx+DXiWLrnX8XF+3ql/li2RJvKxOl2+ltNPL&#xA;Iutoy+rc8FkrbvwRTWXlWjt+ztvmRrZ2M3rlOgPR0jy9W56eQ6tGkhRxegQsn19Zc/Ty6+fc9Yzl&#xA;HpnYq7FXYq7FXYq7FVG4vbO2p9Ynjhr09R1Sv3kZOGOUuQJYSyRjzICj+mtG/wCW+3/5Gp/XJ/l8&#xA;n82XyLHx8f8AOHzd+mtG/wCW+3/5Gp/XH8vk/my+RXx8f84fNFRSxSoHidZEPRlIIP0jKpRINFsE&#xA;gdwuwJdirsVUrq4WCBpDvToPEnFWPzTyzOWkYk9h2HyxVTxV2KtqzKQVJBHQjY4qnWl3rTqY5DWR&#xA;BUHxGKo7FXYqo3t5bWVnPe3T+nbW0bzTyULcUjUsxooJNAO2Tx45TkIx5yND4sMkxCJlLkBaEuPM&#xA;Wi2+lwarLdothcmMW84BYOZiBGFABY1r4fPLYaTLKZxgesXY93NrlqscYCZPpNV8eSY5jt7sVW+n&#xA;H6gl4D1ACoeg5cSQSK+G2GzVdEULtQbS9Nab1mtITNy5eoY05cuta0rXLPGnVcRr3sPBhd0L9yqL&#xA;a3E5nESeuRxMvEc6eHLrTIcZqr2ZcIu63S/Vdf0XR7iFbwulxehzGsNvNO7rDxDE+gkhovqDr45k&#xA;YNLkzA8PKPfIDn7yO5ozanHiI4ucu4E8vcD3q+k3mlahbfpDTuLxzkhpQhRyyMVYOGCuGUihDCuQ&#xA;z48mM8E+Y/HuZ4ZwmOOHVyz6a18dLVF9e2ijuhFw+FVd3VGXaleUbdMBjPh8ToSR91/eolDi4OoA&#xA;P3/qVbfULW4u7q0iYmezKLcLQgAyLzXfv8JyMsUoxEjyly+GzKOWMpGI5x5/F1pqFrdyXUcDFnsp&#xA;vq9wCCKScEkpv1+GRccmKUACf4hY91kfoWGWMiQP4TR+QP6URlbY7FXYq7FXnP5v/mBd+XraHS9L&#xA;f09TvUMjz7FooalarX9pyCAe1D3pnRdgdlR1Ejkybwj07z+x0PbfaUsAEIfXLr3B4FcXFxczPPcS&#xA;vNNIavLIxZmPiWNSc72EBEUBQeJlIyNk2VPJMXYqmegeZNZ0G9S80u5aCRSC6An05AP2ZE6MMxdV&#xA;o8eePDMX949zkabVZMMuKBr8dX035P8AMtv5k8v2uqxL6bSgrPDWvCVDR1+Vdx7Z5pr9GdPmOM9O&#xA;XmH0PQ6sZ8QmOvP3pzmG5bsVS3WpFEUcdfiLcqewFP44qlGKuxV2KuxVHaOrG7JHQKa/Tiqd4q7F&#xA;Uq82W89z5W1m3gRpZ5rG5jiiUVZnaFgqgeJJzK0MxHPAnYCcfvcbWxMsMwNyYy+5hep+RNUSydFP&#xA;r6XZPFcaNpyAl4pp5ozPyHTjEA/p+AZvDN1h7TgZXynKxOXeADw/Pa/cHUZezpiPfCNGMe4ki/lv&#xA;XvLUGi+ZB5heSZJFvhqLzi+jtXdmtA5dU+tNdRw+m0X7v0/TqPDvjLUYfBoVw8FcPF/FX83gJu97&#xA;v49FjgzeLZvi47vh/h/rcYFVtVfDqh7XRL+Oyu7MWV6LVo4jJfi2ZLtnWdWMdxEZil0CoPN46VG2&#xA;9csnqYGUZcUeKz6eL0/TzieG4eQLCGnkImPDKqHq4fVz5SHF6/MhdcadrM1hb2T6MYbRVujbtBbz&#xA;NykLKIyLdp1FryFWBdjxptxwQy4xMyGS5em7kOXX1cPr+A381liyGIjwVH1VQPw9PF6fjy8kFqgv&#xA;F0fUrvXLO7udSXSLf6ndI1Pqkq2tJhLR19JjNVzUfGppv0y7Dw+JCOKURDxJWP5w4tq23HDt5H5t&#xA;Wbi8OUsgkZ+GKP8ANPDve+2+/mES+h+Zpbxi6SLdytatpt+lrJO8UKxxiizfWoI4gjBuaMnxb/ar&#xA;lY1OAR2rhHFxR4gLNnpwSJvaiDt5U2HT5jLe+L08J4SaFDrxgCt7BG/myfzhFdLr2jXcaX/oQwXs&#xA;cs2nRCWRWka3KKwKuAG4N27ZrOz5R8LJE8Fkw+s0NuLzHe7DXCXiwkOOgJfSL58PvSnQYdb0e4tL&#xA;2bTby5tyupQogCtdMbi6iniluVqFV5OL1PQe2ZeqlizCUROIP7s/0domJEfIbONpo5MREjGRHrH9&#xA;LeQIMvM7pbaaLOPQk1rQr+8ppMVsscNapci5uTQkMvxcWBV/2a12rmRk1A3GLJCP7wnf+bww/Fdf&#xA;g48MB2OTHOX7sDbv4pfi+jT6Fqyx6imq6XfX+sTWdpHY3sDEot4lqqs/MOoVlkArJ7fQSNTjJj4c&#xA;4RxiUuIH+bxcqru/hU6edS44SlMxjRH87h9/f1RV/pnmb0720e2klrqcF7qDiFpYLiA2UULcUSSF&#xA;peMycmjDA0HfplWLNguMgQP3ZjHejE8ZPMg16TsabMmLNUokE+sSltYI4QO8XuOVqU+haoNOgeSC&#xA;4nSOa5lsrBrF2tVV1jURtALp5oqshaNi3w8m2G2SjqYcZAMRtEGXH6uu/FwCJ7pCt6DGWnnwCwTv&#xA;KhwenptXHY8u6y9I0z1/0bafWIfq8/ox+rAGL+m/Eck5nduJ2r3znM1ccqNizv3u/wAV8AsUaGyJ&#xA;ytsdir5+/Pa2uI/Occ0gPpT2kZhbt8LMrD6Dv9Od/wCzMwdMQOYkXh/aKBGos8jEPOc6J0LsVdir&#xA;sVe4f84/6rbto2o6UXH1mK4+tBD1MciKlR7Bo9/nnEe1OAjJHJ0Ma+IJP6XsfZrMDjlDqDfz/ser&#xA;5yr0rsVUZbO2lYtIgZjtXfFUsn0e4Vj6NJF7bgH8cVUf0Xff76/4Zf64q79F33++v+GX+uKrk0m9&#xA;ZqFQg8SR/CuKptZ2iW0fFd2O7N44qr4q7FXYq7FXYq7FXYqgLzy/oV9dJd3mn29xdR04zSRqz/Ca&#xA;ruRvQ9PDMjHqssI8MZSEe62jJpsc5cUogn3I/MdvdirsVdirsVdirsVdirsVdirG/PPkjT/Nmli1&#xA;nb0LqAl7O6AqUYihBHdW2qM2PZnaU9LPiG8TzH46uv7Q7PjqYcJ2kOReK335L+fre4aOCzjvIwfh&#xA;niniVSPlK0bfhnaY/aLSSFmRie4g/ot5LJ2DqomhES9xH6aUP+VP/mL/ANWn/p4tf+quT/l/R/z/&#xA;APYy/Uw/kPV/zPtj+t3/ACp/8xf+rT/08Wv/AFVx/l/R/wA//Yy/Uv8AIer/AJn2x/WnPlz8jPMt&#xA;3dI2tlNOs1P7xVdJZmA7LwLIK+JbbwOYer9pcMI/uvXL5D7d3K0vs9mlL956I/M/qevaN5E8p6Ld&#xA;peabp6QXSLwWYM7NQih+0xG465yWo7T1GaPDOVx7tnqcHZ2DFLihGpJ9mA5rsVdirTOiCrMFHiTT&#xA;FVv1i3/36n/BDFXfWLf/AH6n/BDFXfWLf/fqf8EMVd9Yt/8Afqf8EMVd9Yt/9+p/wQxV31i3/wB+&#xA;p/wQxV31i3/36n/BDFXfWLf/AH6n/BDFXfWLf/fqf8EMVcJ4SaCRSfAEYqvxV2KuxV2KuxV2KoCb&#xA;zBoMEhin1K1ikXZkeeNWHzBbL46XLIWISI9xaJanEDRlEfELP8T+Wv8Aq7WX/SRF/wA1ZL8lm/mS&#xA;/wBKUfm8P8+PzDv8T+Wv+rtZf9JEX/NWP5LN/Ml/pSv5vD/Pj8w7/E/lr/q7WX/SRF/zVj+SzfzJ&#xA;f6Ur+bw/z4/MO/xP5a/6u1l/0kRf81Y/ks38yX+lK/m8P8+PzDv8T+Wv+rtZf9JEX/NWP5LN/Ml/&#xA;pSv5vD/Pj8w7/E/lr/q7WX/SRF/zVj+SzfzJf6Ur+bw/z4/MO/xP5a/6u1l/0kRf81Y/ks38yX+l&#xA;K/m8P8+PzDv8T+Wv+rtZf9JEX/NWP5LN/Ml/pSv5vD/Pj8w7/E/lr/q7WX/SRF/zVj+SzfzJf6Ur&#xA;+bw/z4/MIu0vrK8jMtncRXMYNC8Lq61+ak5TkxSgakCD5tsMkZi4kH3K+QZuxV2KqN3cC3gaTqRs&#xA;o9zirH5ZZJXLyMWY9ziqzFXYq7FXYq7FXYq7FXYq7FXYqmmlXzlxBIeQP2CeoI7YqmuKuxV2KuxV&#xA;4t+cv5g6gmov5b0uZreGFV+vzRkq7u45emGHRQpFfE7Z2fs92VAw8aYsn6f1+95Lt3tOQn4MDQH1&#xA;fqeQ51zyzsVdirsVdirsVdirsVdirsVRuj61qmj3yX2m3D21zGdnQ7EfysOjKfA5RqNPDNHhmLDd&#xA;gzzxS4oGi+nfJHmePzL5cttUCiOZqx3MQ6LKmzAex+0PY55n2lojpsxx9OnufQ+z9WNRiE+vX3p7&#xA;mC5rsVS3WpV9NIq/ETyI9gKfxxVKMVdirsVdirsVdirsVdirsVdirsVROnozXkVOxqfkMVZBirsV&#xA;dirsVfMP5n2Vxaee9XWetZZvWjY90lUMtPkDT6M9N7FyCelhXQV8nzvtfGY6md9TfzYtm0da7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq9t/IDWLU6XqOjs6rdJP9bRD9pkdFjYjx4mMV+ecV7U6eXHHJ/DXD9pP&#xA;6Xr/AGazx4JY+t3+j9D1rOTendiqlJa28jFnjVmPUkb4qls+jShiYWDL2U7EYqo/oq9/kH3jFXfo&#xA;q9/kH3jFXfoq9/kH3jFXfoq9/kH3jFXfoq9/kH3jFXfoq9/kH3jFXfoq9/kH3jFXfoq9/kH3jFXf&#xA;oq9/kH3jFW10i8JoQq+5P9MVTOysUtlJrykb7TfwGKonFXYq7FXYqxD8wPy50/zbbpJ6n1XVLdSt&#xA;vdAVBUmvCQd1r08Pwzb9ldrT0hquKB5j9IdX2l2XDUi+UxyP63klz+SXnuGQpHDb3Cg7SRzKAf8A&#xA;kZwP4Z1kPaPSkbkj4fqt5ifYGpB2APx/Wpf8qY/MD/lhj/5Hw/8ANWS/0Q6T+cfkWH8g6r+aPmHf&#xA;8qY/MD/lhj/5Hw/81Y/6IdJ/OPyK/wAg6r+aPmHf8qY/MD/lhj/5Hw/81Y/6IdJ/OPyK/wAg6r+a&#xA;PmHf8qY/MD/lhj/5Hw/81Y/6IdJ/OPyK/wAg6r+aPmHf8qY/MD/lhj/5Hw/81Y/6IdJ/OPyK/wAg&#xA;6r+aPmHf8qY/MD/lhj/5Hw/81Y/6IdJ/OPyK/wAg6r+aPmHf8qY/MD/lhj/5Hw/81Y/6IdJ/OPyK&#xA;/wAg6r+aPmHf8qY/MD/lhj/5Hw/81Y/6IdJ/OPyK/wAg6r+aPmHf8qY/MD/lhj/5Hw/81Y/6IdJ/&#xA;OPyK/wAg6r+aPmE98t/kPrEt0kuvzx21mpBeCBvUmcfy8qcF+dT8swdZ7T4xGsQJl3nk5ul9nchl&#xA;eUgR7hzet6Z5Q8r6XcJc6fpdtbXEalY50jX1ACKGjn4txsTnJ5tfnyjhnORB6Xs9Pi0OHGbjCIPu&#xA;TfMRynYq7FVkk0Mf946pXpU0xVZ9dtP9/J94xV3120/38n3jFXfXbT/fyfeMVd9dtP8AfyfeMVd9&#xA;dtP9/J94xV3120/38n3jFXfXbT/fyfeMVd9dtP8AfyfeMVd9dtP9/J94xVwvLUmglSp9xiqtirsV&#xA;dirsVdiriQBU7AdTiqRzeefJsMjRSa3ZK6mjL66Gh8NjmdHs3UkWMcvkXDl2hpwaM4/MLP8AH/kn&#xA;/q+Wf/I5P64f5L1P+py+SP5S0/8APj83f4/8k/8AV8s/+Ryf1x/kvU/6nL5L/KWn/nx+bv8AH/kn&#xA;/q+Wf/I5P64/yXqf9Tl8l/lLT/z4/N3+P/JP/V8s/wDkcn9cf5L1P+py+S/ylp/58fm7/H/kn/q+&#xA;Wf8AyOT+uP8AJep/1OXyX+UtP/Pj83f4/wDJP/V8s/8Akcn9cf5L1P8Aqcvkv8paf+fH5u/x/wCS&#xA;f+r5Z/8AI5P64/yXqf8AU5fJf5S0/wDPj83f4/8AJP8A1fLP/kcn9cf5L1P+py+S/wApaf8Anx+b&#xA;v8f+Sf8Aq+Wf/I5P64/yXqf9Tl8l/lLT/wA+PzTHTNe0TVQx02/t7zh9sQSK5X/WCmozHzaXLi+u&#xA;Jj7w34dTjyfRIS9xR2UNzsVdiqhe3H1e3aQfa6L8zirH3d3Ys5LMepOKrcVdirsVdirsVdirsVdi&#xA;rsVdiqY6TeOsogc1RvsV7HFU4xV2KuxV2KvC/wA6fPN9catL5bs5TFYWoUXnA0M0rANxYj9lAQKe&#xA;NfbO49nezYxxjNIXKXLyH6y8b292hKUzhiaiOfmXlmdS827FXYq7FXYq7FXYq7FXYq7FURYahe6f&#xA;eRXllM9vdQtyiljNGBH+fTK8uKOSJjIXEs8eSUJCUTRD6d8geaf8TeWbbUpAFugTDdquwEqUqR7M&#xA;CG+nPM+1NF+WzmA+nmPc+idm6z8xhEzz5H3sizXOe7FUBrX+8qf64/UcVSXFXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FVey/wB64f8AWGKsixV2KuxV2Kvlj8wCT521sk1/0yYb+zEZ6j2V/i2P+qHzftL/ABif&#xA;9YsfzYOC7FXYq7FXYq7FXYq7FXYq7FXYq99/IL/lDrz/ALaMn/JiHOC9qP8AGI/1B98ntvZv/F5f&#xA;1z90XpWc29A7FUBrX+8qf64/UcVSXFXYq7FXYq7FXYq7FXYq7FXYq7FVey/3rh/1x+vFWRYq7FXY&#xA;q7FXyv5//wCU21z/AJjZv+JnPUey/wDFsf8AVD5t2l/jE/6xSDNg4TsVdirsVdirsVdirsVdirsV&#xA;dir338gv+UOvP+2jJ/yYhzgvaj/GI/1B98ntvZv/ABeX9c/dF6VnNvQOxVLNamTgkINWryI8NqD9&#xA;eKpTirsVdirsVdirsVdirsVdirsVdiqJ06MveR0/ZPI/IYqyDFXYq7FXYq+YvzR02ew89aqsqkC4&#xA;l+sxMejJMOVR8jUfRnpnYuYT0sK6Cvk+d9r4jDUzvqb+bFc2rrXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;tP5A69Ziyv8AQpJAl2ZvrcCE0Misio/HxK+mCfnnGe1OllxRygemuE+W/wC1632b1MeGWI/Vdj8f&#xA;B69nIvUuxVY8MLmrorE9yAcVS2fRW5EwOOJ/Zau304qo/oe78U+8/wBMVd+h7vxT7z/TFXfoe78U&#xA;+8/0xV36Hu/FPvP9MVd+h7vxT7z/AExV36Hu/FPvP9MVd+h7vxT7z/TFXfoe78U+8/0xV36Hu/FP&#xA;vP8ATFW10a6J3ZAPGpP8MVTKzsorZTx+Jz9pziqIxV2KuxV2KsY88+QNJ822iLcMbe+gBFteIASo&#xA;PVWU05L7V+RzZ9m9qZNJLbeJ5j8dXXdodmw1Md9pDkXlNz+Qvm+OUiC5spov2X5yIae6lDT7znVQ&#xA;9p9ORuJA+4frean7OZwdjE/P9Sj/AMqJ87f78s/+Rr/80ZL/AETab+l8v2sf9Duo/o/P9jv+VE+d&#xA;v9+Wf/I1/wDmjH/RNpv6Xy/av+h3Uf0fn+x3/KifO3+/LP8A5Gv/AM0Y/wCibTf0vl+1f9Duo/o/&#xA;P9jv+VE+dv8Afln/AMjX/wCaMf8ARNpv6Xy/av8Aod1H9H5/sd/yonzt/vyz/wCRr/8ANGP+ibTf&#xA;0vl+1f8AQ7qP6Pz/AGO/5UT52/35Z/8AI1/+aMf9E2m/pfL9q/6HdR/R+f7Hf8qJ87f78s/+Rr/8&#xA;0Y/6JtN/S+X7V/0O6j+j8/2O/wCVE+dv9+Wf/I1/+aMf9E2m/pfL9q/6HdR/R+f7Hf8AKifO3+/L&#xA;P/ka/wDzRj/om039L5ftX/Q7qP6Pz/Ynvlv8g7hbqOfzBexNboQzWlryJfvxaRgnEePEH5jMLV+1&#xA;A4SMMTfef1buZpfZw8V5ZCu4fresWWg6JYuslnp9tbSIOKyRRIjAUpTkoBzlMmqyzFSlIjzJemx6&#xA;fHA3GMR8EdlDc7FXYq0zKoqxCjxO2KrfrFv/AL9T/ghirvrFv/v1P+CGKu+sW/8Av1P+CGKu+sW/&#xA;+/U/4IYq76xb/wC/U/4IYq76xb/79T/ghirvrFv/AL9T/ghirvrFv/v1P+CGKu+sW/8Av1P+CGKt&#xA;rNCxorqT4Ag4quxV2KuxV2KuxV2KoK51zRLWQxXOoW0Eo6pJNGjD6GIOXw02WQuMZEe4tM9RjiaM&#xA;og+8KX+J/LX/AFdrL/pIi/5qyX5LN/Ml/pSx/N4f58fmHf4n8tf9Xay/6SIv+asfyWb+ZL/Slfze&#xA;H+fH5h3+J/LX/V2sv+kiL/mrH8lm/mS/0pX83h/nx+Yd/ify1/1drL/pIi/5qx/JZv5kv9KV/N4f&#xA;58fmHf4n8tf9Xay/6SIv+asfyWb+ZL/SlfzeH+fH5h3+J/LX/V2sv+kiL/mrH8lm/mS/0pX83h/n&#xA;x+Yd/ify1/1drL/pIi/5qx/JZv5kv9KV/N4f58fmHf4n8tf9Xay/6SIv+asfyWb+ZL/SlfzeH+fH&#xA;5h3+J/LX/V2sv+kiL/mrH8lm/mS/0pX83h/nx+YRttd2l1H6trNHPGejxMHX71JymeOUTUgQfNuh&#xA;OMhcTarkGTsVdiqld3At4GkIqRso8ScVY9LNJK5eRizHFVmKuxV2KuxV2KuxV2KuxV2KuxVNNKvn&#xA;LiCQ8gfsE9RTtiqa4q7FXYq7FXjH5yfmHqEOoP5c0mdreOFR+kJ4zR2ZwGEQYdFCkcqdemdl7P8A&#xA;ZMDDxsgu/pH6Xk+3e05iXgwNV9X6nj+dc8q7CrsVdirsVdirsVdirsVdiqP0XXdW0W+S90y5e2uE&#xA;INVPwsB+y69GHscx9RpseaPDMWG7BqJ4pcUDRfTnkvzPF5l8u22qoojlkBS4hG4SVDRgPY9R7HPN&#xA;O0dGdNmOPmOnufRNBqxqMQn8/enmYLmOxVAa1/vKv+uP1HFUlxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;Xsf964f9YYqyLFXYq7FXYq+WPzBZm8762WNT9clH0BqD8M9R7KFaXH/VD5v2mf8ACJ/1ix/Ng4Ls&#xA;VdirsVdirsVdirsVdirsVdir338gv+UOvP8Atoyf8mIc4L2o/wAZj/UH3ye29m/8XP8AXP3RelZz&#xA;b0DsVQGtf7yp/rj9RxVJcVdirsVdirsVdirsVdirsVdirsVV7L/euH/XH68VZFirsVdirsVfK/n/&#xA;AP5TbXP+Y2b/AImc9R7L/wAWx/1Q+bdpf4xP+sUgzYOE7FXYq7FXYq7FXYq7FXYq7FXYq99/IL/l&#xA;Drz/ALaMn/JiHOC9qP8AGI/1B98ntvZv/F5f1z90XpWc29A7FUBrX+8qf64/UcVSXFXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FVey/3rh/1x+vFWRYq7FXYq7FXyv5//wCU21z/AJjZv+JnPUey/wDFsf8AVD5t&#xA;2l/jE/6xSDNg4TsVdirsVdirsVdirsVdirsVdir338gv+UOvP+2jJ/yYhzgvaj/GI/1B98ntvZv/&#xA;ABeX9c/dF6VnNvQOxVAa1/vKn+uP1HFUlxV2KuxV2KuxV2KuxV2KuxV2KuxVXsv964f9cfrxVkWK&#xA;uxV2KuxV8r+f/wDlNtc/5jZv+JnPUey/8Wx/1Q+bdpf4xP8ArFIM2DhOxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KvffyC/5Q68/7aMn/ACYhzgvaj/GI/wBQffJ7b2b/AMXl/XP3RelZzb0DsVQGtf7yp/rj9RxV&#xA;JcVdirsVdirsVdirsVdirsVdirsVV7L/AHrh/wBcfrxVkWKuxV2KuxV8r+f/APlNtc/5jZv+JnPU&#xA;ey/8Wx/1Q+bdpf4xP+sUgzYOE7FXYq7FXYq7FXYq7FXYq7FXYq99/IL/AJQ68/7aMn/JiHOC9qP8&#xA;Yj/UH3ye29m/8Xl/XP3RelZzb0DsVQGtf7yp/rj9RxVJcVdirsVdirsVdirsVdirsVdirsVV7L/e&#xA;uH/XH68VZFirsVdirsVfK/n/AP5TbXP+Y2b/AImc9R7L/wAWx/1Q+bdpf4xP+sUgzYOE7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq99/IL/lDrz/ALaMn/JiHOC9qP8AGI/1B98ntvZv/F5f1z90XpWc29A7FUBr&#xA;X+8qf64/UcVSXFXYq7FXYq7FXYq7FXYq7FXYq7FVey/3rh/1x+vFWRYq7FXYq7FXyv5//wCU21z/&#xA;AJjZv+JnPUey/wDFsf8AVD5t2l/jE/6xSDNg4TsVdirsVdirsVdirsVdirsVdir338gv+UOvP+2j&#xA;J/yYhzgvaj/GI/1B98ntvZv/ABeX9c/dF6VnNvQOxVLtbcehGn7Rav0AEfxxVJ8VdirsVdirsVdi&#xA;rsVdirsVdirsVRFgpa8iA/mr92+KshxV2KuxV2Kvlz8x7aW389a0ko4s1y0gH+TLR1P/AALDPT+y&#xA;JiWlxkfzfu2fOe1ImOpmD/O+/djebJ17sVdirsVdirsVdirsVdirsVdir3T/AJx/voG8vajYBh68&#xA;N367LXfhLEiKafOI5w3tTjIzRn0Ma+RP63svZrIPClHqJX8wP1PU85d6R2Koeewtp35yAlqUrU4q&#xA;lU+l3UbHgvqJ2I6/diql9Su/98v9xxV31K7/AN8v9xxV31K7/wB8v9xxV31K7/3y/wBxxV31K7/3&#xA;y/3HFXfUrv8A3y/3HFXfUrv/AHy/3HFXfUrv/fL/AHHFXfUrv/fL/ccVctheMaCJvpFP14qmun6f&#xA;9XrJIQZSKbdAMVRuKuxV2KuxV59+Z35Y/wCJ+Gpaa6Q6vCnBlfZJkG4BI+yy9j9B9ug7G7Z/Leie&#xA;+M/Y6Ptbsn8x64bTH2vHbn8uPPVvKYn0W5Zl6mNfVX6GQsv4518O19LIWMkfu+95WXZepiaMJff9&#xA;yl/gDzt/1Y73/kS/9Ml/Kmm/1SPzYfybqP5kvk7/AAB52/6sd7/yJf8Apj/Kmm/1SPzX+TdR/Ml8&#xA;nf4A87f9WO9/5Ev/AEx/lTTf6pH5r/Juo/mS+Tv8Aedv+rHe/wDIl/6Y/wAqab/VI/Nf5N1H8yXy&#xA;d/gDzt/1Y73/AJEv/TH+VNN/qkfmv8m6j+ZL5O/wB52/6sd7/wAiX/pj/Kmm/wBUj81/k3UfzJfJ&#xA;3+APO3/Vjvf+RL/0x/lTTf6pH5r/ACbqP5kvk7/AHnb/AKsd7/yJf+mP8qab/VI/Nf5N1H8yXyd/&#xA;gDzt/wBWO9/5Ev8A0x/lTTf6pH5r/Juo/mS+SeeXPyc836pdRi9tzpllUGWeenOngsQPIt86DMLV&#xA;+0GnxR9J45dw/W5ml7Dz5JeocEe8/qey+Xfy38q+X75b7TYJY7pUMfqNNIQwYUPJeXE/SKZx2r7X&#xA;z6iPBMjh9wes0vZWHBLigDxe8snzWOxdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:db6f2cef-bb63-2e48-a376-dae7dc6ac212</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:db6f2cef-bb63-2e48-a376-dae7dc6ac212</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:1a864a6a-9023-fe44-9664-e51c1b3b76b2</stRef:instanceID>
            <stRef:documentID>xmp.did:1a864a6a-9023-fe44-9664-e51c1b3b76b2</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f60f69cf-264c-be42-be7a-34122c6c33b8</stEvt:instanceID>
                  <stEvt:when>2018-01-13T13:33:41+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:012dfa1b-b266-fd48-b317-d23b17fefd63</stEvt:instanceID>
                  <stEvt:when>2018-01-13T13:34:56+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:db05b9a0-0ab8-d94f-b94d-5e55f6b77894</stEvt:instanceID>
                  <stEvt:when>2018-01-13T20:11:54+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:26fd8936-8e42-774c-9099-bdb7cccb8845</stEvt:instanceID>
                  <stEvt:when>2018-01-13T20:29:06+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:16d65a3b-994b-7d46-b5d1-63cf901afffe</stEvt:instanceID>
                  <stEvt:when>2018-01-19T00:56:52+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:cc535541-3b1f-c449-9522-c3a8b3e4bf61</stEvt:instanceID>
                  <stEvt:when>2018-01-29T18:25:37+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:92cd3c31-d14b-e04f-b237-f87e929310f5</stEvt:instanceID>
                  <stEvt:when>2018-01-29T22:42:48+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:cfed7064-96d6-2046-9ea7-c8d783caa391</stEvt:instanceID>
                  <stEvt:when>2018-01-30T00:38:56+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1919e15e-a9e6-1348-9198-b9001d550091</stEvt:instanceID>
                  <stEvt:when>2018-01-30T11:41:28+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:654725a9-b04a-404d-880c-df5da5f1f4a1</stEvt:instanceID>
                  <stEvt:when>2018-01-30T12:16:33+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:405a540c-a3fc-9645-af9a-0fc5138c8894</stEvt:instanceID>
                  <stEvt:when>2018-03-17T11:15:34+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:37c48d11-a197-1446-91a4-596f64c16c0e</stEvt:instanceID>
                  <stEvt:when>2018-03-17T13:23:45+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a2c0efc5-bb59-8d4b-8c96-43e3d91e9755</stEvt:instanceID>
                  <stEvt:when>2018-03-17T13:56:43+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4beda575-2a28-7941-bd8b-b7eb67a84bfd</stEvt:instanceID>
                  <stEvt:when>2018-03-17T17:32:09+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8e8ac16b-01ad-2e40-b559-93ca28107e4c</stEvt:instanceID>
                  <stEvt:when>2018-03-18T21:35:21+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:41b9922f-06f2-d540-809e-c81243bdee70</stEvt:instanceID>
                  <stEvt:when>2018-03-18T22:14:52+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:dc21b2e5-3862-c441-be66-4b76b03b682b</stEvt:instanceID>
                  <stEvt:when>2018-03-18T23:44:33+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:abd82d98-62f7-a047-b6b9-315d1fb3c948</stEvt:instanceID>
                  <stEvt:when>2018-03-19T12:30:03+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:cab422d0-0574-8140-a985-1f10f368f3c0</stEvt:instanceID>
                  <stEvt:when>2018-03-19T23:32:47+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:029e5efb-a507-0f47-9cbe-4097c4997d48</stEvt:instanceID>
                  <stEvt:when>2018-03-19T23:49:26+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d30703f7-e7ce-d24e-87a1-7c14ec712416</stEvt:instanceID>
                  <stEvt:when>2018-03-22T14:06:35+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4f98b24f-3efe-d348-883d-f387cac59f20</stEvt:instanceID>
                  <stEvt:when>2018-03-22T15:02:39+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6b1a6799-6117-6141-8b80-9afdcfb63c64</stEvt:instanceID>
                  <stEvt:when>2018-03-22T16:28:40+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:bebf3b51-271c-464a-af34-1a65136cb50a</stEvt:instanceID>
                  <stEvt:when>2018-03-24T13:43:24+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:23170b90-179b-4c44-9b99-f1b836df749f</stEvt:instanceID>
                  <stEvt:when>2018-03-24T13:53:07+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:de4b899f-ee5e-a847-afbe-5dcfe64599e0</stEvt:instanceID>
                  <stEvt:when>2018-03-24T22:49:23+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:81c148bc-ab4d-3343-9d8b-c4e8852a2234</stEvt:instanceID>
                  <stEvt:when>2018-03-24T23:06+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d756afcf-05ee-6f47-bf3c-6be58a7c3587</stEvt:instanceID>
                  <stEvt:when>2018-03-25T22:31:17+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9b9e18b8-8609-394d-ad54-9acafda8e5fc</stEvt:instanceID>
                  <stEvt:when>2018-03-26T00:20:08+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3b25e3d8-0624-d046-8a49-be0aac82db5c</stEvt:instanceID>
                  <stEvt:when>2018-03-26T10:18:17+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:125054aa-3e00-d347-bc40-83daca30fba6</stEvt:instanceID>
                  <stEvt:when>2018-03-26T10:35:30+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4c7a94c7-acd1-ba49-a819-43e5fa88ef06</stEvt:instanceID>
                  <stEvt:when>2018-03-26T10:44:49+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ce9e789f-e35c-724c-b7bb-487f0e6be8b7</stEvt:instanceID>
                  <stEvt:when>2018-03-26T10:56:58+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:db6f2cef-bb63-2e48-a376-dae7dc6ac212</stEvt:instanceID>
                  <stEvt:when>2018-03-26T11:35:21+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>170.000000</stDim:w>
            <stDim:h>150.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=87 B=220 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>87</xmpG:green>
                           <xmpG:blue>220</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -150 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 150 li
170 150 li
170 0 li
cp
clp
170 150 mo
0 150 li
0 0 li
170 0 li
170 150 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
103.96 57.6333 mo
153.979 57.6333 li
158.05 57.6333 161.351 60.9341 161.351 65.0054 cv
161.351 75.6636 li
161.351 77.335 162.132 78.8242 163.349 79.7861 cv
163.349 79.7861 li
162.266 80.2305 161.067 80.2852 159.949 79.9756 cv
158.609 81.8262 156.438 83.0352 153.979 83.0352 cv
103.96 83.0352 li
99.8887 83.0352 96.5879 79.7354 96.5879 75.6636 cv
96.5879 65.0054 li
96.5879 60.9341 99.8887 57.6333 103.96 57.6333 cv
cp
0 .509804 1 rgb
f
103.96 89.957 mo
153.979 89.957 li
158.05 89.957 161.351 93.2578 161.351 97.3291 cv
161.351 135.103 li
161.351 136.774 162.132 138.264 163.349 139.225 cv
163.349 139.226 li
162.266 139.67 161.067 139.725 159.949 139.415 cv
158.609 141.266 156.438 142.475 153.979 142.475 cv
103.96 142.475 li
99.8887 142.475 96.5879 139.174 96.5879 135.103 cv
96.5879 97.3291 li
96.5879 93.2578 99.8887 89.957 103.96 89.957 cv
cp
f
159.949 27.4414 mo
158.609 29.292 156.438 30.501 153.979 30.501 cv
141.94 30.501 li
137.869 30.501 134.568 27.2002 134.568 23.1289 cv
134.568 19.0571 137.869 15.7568 141.94 15.7568 cv
153.979 15.7568 li
158.05 15.7568 161.351 19.0571 161.351 23.1289 cv
161.351 24.8003 162.132 26.2896 163.349 27.251 cv
163.349 27.2515 li
162.266 27.6963 161.067 27.7505 159.949 27.4414 cv
cp
f
159.949 48.4214 mo
158.609 50.2725 156.438 51.481 153.979 51.481 cv
103.96 51.481 li
99.8887 51.481 96.5879 48.1807 96.5879 44.1089 cv
96.5879 40.0376 99.8887 36.7368 103.96 36.7368 cv
153.979 36.7368 li
158.05 36.7368 161.351 40.0376 161.351 44.1089 cv
161.351 45.7808 162.132 47.2695 163.349 48.2314 cv
163.349 48.2314 li
162.266 48.6768 161.067 48.731 159.949 48.4214 cv
cp
f
66.0396 57.6333 mo
16.0215 57.6333 li
11.9502 57.6333 8.64941 60.9341 8.64941 65.0054 cv
8.64941 75.6636 li
8.64941 77.335 7.86816 78.8242 6.65088 79.7861 cv
6.65137 79.7861 li
7.73389 80.2305 8.93213 80.2852 10.0513 79.9756 cv
11.3901 81.8262 13.5625 83.0352 16.0215 83.0352 cv
66.0396 83.0352 li
70.1113 83.0352 73.4116 79.7354 73.4116 75.6636 cv
73.4116 65.0054 li
73.4116 60.9341 70.1113 57.6333 66.0396 57.6333 cv
cp
.878431 .878431 .878431 rgb
f
66.0396 89.957 mo
16.0215 89.957 li
11.9502 89.957 8.64941 93.2578 8.64941 97.3291 cv
8.64941 135.103 li
8.64941 136.774 7.86816 138.264 6.65088 139.225 cv
6.65137 139.226 li
7.73389 139.67 8.93213 139.725 10.0508 139.415 cv
11.3901 141.266 13.5625 142.475 16.0215 142.475 cv
66.0396 142.475 li
70.1113 142.475 73.4116 139.174 73.4116 135.103 cv
73.4116 97.3291 li
73.4116 93.2578 70.1113 89.957 66.0396 89.957 cv
cp
f
10.0508 27.4414 mo
11.3901 29.292 13.5625 30.501 16.0215 30.501 cv
28.0596 30.501 li
32.1309 30.501 35.4316 27.2002 35.4316 23.1289 cv
35.4316 19.0571 32.1309 15.7568 28.0596 15.7568 cv
16.0215 15.7568 li
11.9502 15.7568 8.64941 19.0571 8.64941 23.1289 cv
8.64941 24.8003 7.86816 26.2896 6.65088 27.251 cv
6.65137 27.2515 li
7.73389 27.6963 8.93213 27.7505 10.0508 27.4414 cv
cp
f
10.0508 48.4214 mo
11.3901 50.2725 13.5625 51.481 16.0215 51.481 cv
66.0396 51.481 li
70.1113 51.481 73.4116 48.1807 73.4116 44.1089 cv
73.4116 40.0376 70.1113 36.7368 66.0396 36.7368 cv
16.0215 36.7368 li
11.9502 36.7368 8.64941 40.0376 8.64941 44.1089 cv
8.64941 45.7808 7.86816 47.2695 6.65088 48.2314 cv
6.65137 48.2314 li
7.73389 48.6768 8.93213 48.731 10.0508 48.4214 cv
cp
f
70.0518 10.5425 mo
71.9043 15.2476 li
73.7485 10.5425 li
74.4971 10.5425 li
72.2119 16.1387 li
71.5967 16.1387 li
69.3032 10.5425 li
70.0518 10.5425 li
cp
0 .509804 1 rgb
f
79.0527 15.5078 mo
79.0527 16.1387 li
75.2539 16.1387 li
75.2539 10.5425 li
78.9824 10.5425 li
78.9824 11.1733 li
75.9634 11.1733 li
75.9634 12.9858 li
78.5879 12.9858 li
78.5879 13.5771 li
75.9634 13.5771 li
75.9634 15.5078 li
79.0527 15.5078 li
cp
f
79.5498 13.3013 mo
79.5498 12.9648 79.6084 12.6299 79.7266 12.2964 cv
79.8447 11.9624 80.0186 11.6626 80.2471 11.3975 cv
80.4756 11.1318 80.7549 10.9185 81.0869 10.7549 cv
81.418 10.5923 81.793 10.5107 82.2139 10.5107 cv
82.7129 10.5107 83.1406 10.624 83.498 10.8496 cv
83.8555 11.0757 84.1211 11.3701 84.2939 11.7324 cv
83.7363 12.0952 li
83.6514 11.9165 83.5498 11.7671 83.4316 11.646 cv
83.3125 11.5249 83.1836 11.4277 83.0449 11.354 cv
82.9063 11.2803 82.7627 11.228 82.6152 11.1963 cv
82.4688 11.165 82.3242 11.1494 82.1826 11.1494 cv
81.8721 11.1494 81.5977 11.2139 81.3584 11.3423 cv
81.1191 11.4712 80.9189 11.6392 80.7549 11.8472 cv
80.5928 12.0547 80.4707 12.2881 80.3887 12.5483 cv
80.3076 12.8086 80.2666 13.0703 80.2666 13.333 cv
80.2666 13.627 80.3154 13.9067 80.4121 14.1719 cv
80.5098 14.4375 80.6455 14.6724 80.8184 14.8774 cv
80.9922 15.0825 81.1973 15.2451 81.4336 15.3662 cv
81.6699 15.4873 81.9277 15.5474 82.2061 15.5474 cv
82.3525 15.5474 82.5039 15.5288 82.6592 15.4922 cv
82.8135 15.4556 82.9629 15.396 83.1045 15.3149 cv
83.2461 15.2334 83.3789 15.1309 83.502 15.0078 cv
83.626 14.8838 83.7275 14.7354 83.8057 14.562 cv
84.3975 14.8857 li
84.3066 15.0957 84.1826 15.2808 84.0225 15.4409 cv
83.8623 15.6016 83.6807 15.7368 83.4785 15.8467 cv
83.2764 15.9575 83.0615 16.041 82.8369 16.0991 cv
82.6104 16.1572 82.3896 16.186 82.1738 16.186 cv
81.79 16.186 81.4385 16.1016 81.1182 15.9336 cv
80.7979 15.7651 80.5205 15.5464 80.2871 15.2759 cv
80.0527 15.0049 79.8711 14.6978 79.7432 14.353 cv
79.6143 14.0093 79.5498 13.6582 79.5498 13.3013 cv
cp
f
89.3242 11.1733 mo
87.3926 11.1733 li
87.3926 16.1387 li
86.6836 16.1387 li
86.6836 11.1733 li
84.752 11.1733 li
84.752 10.5425 li
89.3242 10.5425 li
89.3242 11.1733 li
cp
f
90.3164 13.3403 mo
90.3164 13.624 90.3623 13.8989 90.4541 14.1641 cv
90.5459 14.4297 90.6768 14.665 90.8447 14.8696 cv
91.0117 15.0747 91.2148 15.2373 91.4512 15.3584 cv
91.6885 15.4795 91.9502 15.5396 92.2393 15.5396 cv
92.5391 15.5396 92.8066 15.4751 93.043 15.3462 cv
93.2803 15.2178 93.4805 15.0498 93.6465 14.8418 cv
93.8125 14.6343 93.9385 14.3994 94.0244 14.1362 cv
94.1113 13.874 94.1543 13.6084 94.1543 13.3403 cv
94.1543 13.0571 94.1094 12.7822 94.0166 12.5166 cv
93.9248 12.2515 93.793 12.0176 93.623 11.8154 cv
93.4521 11.6133 93.25 11.4517 93.0156 11.3306 cv
92.7822 11.21 92.5234 11.1494 92.2393 11.1494 cv
91.9395 11.1494 91.6729 11.2119 91.4355 11.3384 cv
91.1982 11.4644 90.998 11.6299 90.832 11.835 cv
90.667 12.0396 90.5391 12.2739 90.4502 12.5361 cv
90.3604 12.7993 90.3164 13.0674 90.3164 13.3403 cv
cp
92.2314 16.1782 mo
91.8379 16.1782 91.4785 16.0981 91.1553 15.9375 cv
90.832 15.7773 90.5547 15.5649 90.3242 15.2993 cv
90.0928 15.0342 89.9141 14.73 89.7891 14.3892 cv
89.6621 14.0474 89.5986 13.6978 89.5986 13.3403 cv
89.5986 12.9673 89.666 12.6099 89.7998 12.2681 cv
89.9336 11.9272 90.1191 11.625 90.3564 11.3623 cv
90.5918 11.0996 90.8721 10.8901 91.1953 10.7354 cv
91.5186 10.5801 91.8691 10.5029 92.2471 10.5029 cv
92.6416 10.5029 92.999 10.5854 93.3193 10.7515 cv
93.6396 10.9165 93.915 11.1338 94.1475 11.4019 cv
94.3779 11.6694 94.5566 11.9727 94.6826 12.312 cv
94.8096 12.6509 94.8721 12.9966 94.8721 13.3481 cv
94.8721 13.7212 94.8047 14.0791 94.6719 14.4199 cv
94.5361 14.7617 94.3535 15.063 94.1191 15.3232 cv
93.8857 15.583 93.6064 15.7905 93.2832 15.9453 cv
92.96 16.1006 92.6094 16.1782 92.2314 16.1782 cv
cp
f
96.5664 13.498 mo
98.2607 13.498 li
98.4082 13.498 98.541 13.4668 98.6592 13.4033 cv
98.7783 13.3403 98.8789 13.2549 98.9629 13.1475 cv
99.0469 13.0396 99.1133 12.9146 99.1602 12.7729 cv
99.207 12.6309 99.2314 12.4839 99.2314 12.3315 cv
99.2314 12.1738 99.2031 12.0254 99.1475 11.8862 cv
99.0928 11.7471 99.0195 11.623 98.9277 11.5156 cv
98.835 11.4077 98.7275 11.3242 98.6045 11.2637 cv
98.4814 11.2031 98.3506 11.1733 98.2139 11.1733 cv
96.5664 11.1733 li
96.5664 13.498 li
cp
95.8574 16.1387 mo
95.8574 10.5425 li
98.2539 10.5425 li
98.5 10.5425 98.7275 10.5933 98.9355 10.6963 cv
99.1426 10.7983 99.3213 10.9351 99.4707 11.106 cv
99.6201 11.2769 99.7373 11.4683 99.8213 11.6812 cv
99.9063 11.894 99.9482 12.1108 99.9482 12.3315 cv
99.9482 12.5264 99.9209 12.7139 99.8652 12.8955 cv
99.8105 13.0767 99.7314 13.2407 99.6289 13.3877 cv
99.5264 13.5352 99.4023 13.6606 99.2588 13.7661 cv
99.1143 13.8716 98.9521 13.9473 98.7744 13.9946 cv
100.129 16.1387 li
99.3262 16.1387 li
98.0488 14.1289 li
96.5664 14.1289 li
96.5664 16.1387 li
95.8574 16.1387 li
cp
f
57.3779 25.5972 mo
57.3779 21.27 li
55.5176 24.5884 li
55.1162 24.5884 li
53.248 21.27 li
53.248 25.5972 li
52.5381 25.5972 li
52.5381 20.001 li
53.2876 20.001 li
55.313 23.6343 li
57.3462 20.001 li
58.0874 20.001 li
58.0874 25.5972 li
57.3779 25.5972 li
cp
f
62.478 23.2642 mo
62.4624 23.0698 62.4136 22.8901 62.3325 22.7241 cv
62.2505 22.5586 62.1479 22.4185 62.0249 22.3022 cv
61.9009 22.187 61.7578 22.0967 61.5952 22.0308 cv
61.4326 21.9648 61.2588 21.9321 61.0752 21.9321 cv
60.8911 21.9321 60.7173 21.9648 60.5547 22.0308 cv
60.3921 22.0967 60.2485 22.188 60.125 22.3066 cv
60.002 22.4248 59.9019 22.5654 59.8257 22.7285 cv
59.749 22.8911 59.7036 23.0698 59.6875 23.2642 cv
62.478 23.2642 li
cp
61.0669 25.6763 mo
60.7568 25.6763 60.4731 25.6196 60.2158 25.5068 cv
59.9585 25.3936 59.7378 25.2397 59.5537 25.0454 cv
59.3696 24.8511 59.2266 24.624 59.1245 24.3638 cv
59.0215 24.1035 58.9707 23.8291 58.9707 23.54 cv
58.9707 23.251 59.0215 22.978 59.1245 22.7207 cv
59.2266 22.4629 59.3711 22.2373 59.5576 22.0425 cv
59.7441 21.8481 59.9663 21.6943 60.2236 21.5815 cv
60.481 21.4683 60.7646 21.4121 61.0752 21.4121 cv
61.3853 21.4121 61.6675 21.4702 61.9224 21.5854 cv
62.1768 21.7012 62.394 21.855 62.5723 22.0464 cv
62.7515 22.2383 62.8892 22.4614 62.9863 22.7163 cv
63.0835 22.9712 63.1318 23.2354 63.1318 23.5088 cv
63.1318 23.5664 63.1309 23.6187 63.1284 23.666 cv
63.126 23.7134 63.1216 23.7505 63.1162 23.7769 cv
59.7036 23.7769 li
59.7192 23.9814 59.7666 24.168 59.8457 24.3364 cv
59.9238 24.5044 60.0269 24.6489 60.1533 24.7695 cv
60.2788 24.8906 60.4224 24.9849 60.582 25.0532 cv
60.7427 25.1221 60.9121 25.1563 61.0908 25.1563 cv
61.2173 25.1563 61.3403 25.1387 61.4614 25.1045 cv
61.582 25.0708 61.6953 25.0244 61.7998 24.9663 cv
61.9053 24.9092 61.9985 24.8379 62.0801 24.7539 cv
62.1611 24.6699 62.2231 24.5752 62.2656 24.4702 cv
62.8643 24.6357 li
62.7964 24.7881 62.7026 24.9277 62.5845 25.0532 cv
62.4658 25.1797 62.3296 25.2886 62.1743 25.3804 cv
62.0195 25.4727 61.8472 25.5444 61.6582 25.5972 cv
61.4692 25.6499 61.272 25.6763 61.0669 25.6763 cv
cp
f
65.3472 25.6763 mo
65.0161 25.6763 64.6899 25.6245 64.3691 25.5225 cv
64.0488 25.4199 63.7729 25.2715 63.5415 25.0771 cv
63.8413 24.6123 li
64.083 24.7959 64.3247 24.9341 64.5664 25.0259 cv
64.8081 25.1177 65.0635 25.1641 65.3311 25.1641 cv
65.6304 25.1641 65.8682 25.1045 66.0439 24.9863 cv
66.2207 24.8682 66.3086 24.7017 66.3086 24.4858 cv
66.3086 24.3862 66.2847 24.3003 66.2373 24.23 cv
66.1899 24.1587 66.1196 24.0972 66.0249 24.0444 cv
65.9297 23.9922 65.8096 23.9448 65.6621 23.9023 cv
65.5151 23.8608 65.3438 23.8159 65.1494 23.7686 cv
64.9028 23.7056 64.6899 23.645 64.5117 23.5874 cv
64.3325 23.5298 64.1855 23.4614 64.0698 23.3823 cv
63.9546 23.3037 63.8701 23.209 63.8174 23.0986 cv
63.7651 22.9883 63.7393 22.8516 63.7393 22.689 cv
63.7393 22.4839 63.7798 22.3013 63.8613 22.1406 cv
63.9424 21.981 64.0542 21.8472 64.1963 21.7393 cv
64.3379 21.6313 64.5049 21.5498 64.6963 21.4946 cv
64.8887 21.4395 65.0942 21.4121 65.3154 21.4121 cv
65.625 21.4121 65.9141 21.4619 66.1821 21.5615 cv
66.4502 21.6616 66.6758 21.793 66.8604 21.9561 cv
66.5449 22.3735 li
66.3716 22.2212 66.1768 22.1069 65.9614 22.0308 cv
65.7461 21.9546 65.5254 21.9165 65.2998 21.9165 cv
65.0474 21.9165 64.833 21.9702 64.6572 22.0781 cv
64.481 22.1855 64.3931 22.3579 64.3931 22.5942 cv
64.3931 22.689 64.4097 22.7681 64.4443 22.8306 cv
64.4785 22.8936 64.5352 22.9487 64.6138 22.9966 cv
64.6924 23.0439 64.7939 23.0859 64.9175 23.1221 cv
65.0405 23.1592 65.189 23.1987 65.3623 23.2407 cv
65.6357 23.3037 65.8735 23.3682 66.0757 23.4341 cv
66.2778 23.4995 66.4463 23.5771 66.5801 23.666 cv
66.7144 23.7554 66.814 23.8608 66.8799 23.9814 cv
66.9453 24.1025 66.978 24.2495 66.978 24.4229 cv
66.978 24.8066 66.8311 25.1113 66.5371 25.3374 cv
66.2427 25.563 65.8462 25.6763 65.3472 25.6763 cv
cp
f
69.2407 25.6763 mo
68.9092 25.6763 68.5835 25.6245 68.2627 25.5225 cv
67.9424 25.4199 67.6665 25.2715 67.4351 25.0771 cv
67.7349 24.6123 li
67.9766 24.7959 68.2183 24.9341 68.46 25.0259 cv
68.7017 25.1177 68.957 25.1641 69.2246 25.1641 cv
69.5239 25.1641 69.7617 25.1045 69.9375 24.9863 cv
70.1143 24.8682 70.2021 24.7017 70.2021 24.4858 cv
70.2021 24.3862 70.1782 24.3003 70.1309 24.23 cv
70.0835 24.1587 70.0132 24.0972 69.918 24.0444 cv
69.8232 23.9922 69.7026 23.9448 69.5557 23.9023 cv
69.4087 23.8608 69.2373 23.8159 69.043 23.7686 cv
68.7964 23.7056 68.5835 23.645 68.4048 23.5874 cv
68.2261 23.5298 68.0791 23.4614 67.9634 23.3823 cv
67.8481 23.3037 67.7637 23.209 67.7109 23.0986 cv
67.6582 22.9883 67.6328 22.8516 67.6328 22.689 cv
67.6328 22.4839 67.6733 22.3013 67.7549 22.1406 cv
67.8359 21.981 67.9473 21.8472 68.0898 21.7393 cv
68.2314 21.6313 68.3979 21.5498 68.5898 21.4946 cv
68.7822 21.4395 68.9878 21.4121 69.209 21.4121 cv
69.5186 21.4121 69.8076 21.4619 70.0757 21.5615 cv
70.3438 21.6616 70.5693 21.793 70.7539 21.9561 cv
70.4385 22.3735 li
70.2651 22.2212 70.0703 22.1069 69.855 22.0308 cv
69.6396 21.9546 69.4189 21.9165 69.1934 21.9165 cv
68.9409 21.9165 68.7266 21.9702 68.5508 22.0781 cv
68.3745 22.1855 68.2866 22.3579 68.2866 22.5942 cv
68.2866 22.689 68.3032 22.7681 68.3374 22.8306 cv
68.3721 22.8936 68.4287 22.9487 68.5073 22.9966 cv
68.5859 23.0439 68.687 23.0859 68.811 23.1221 cv
68.9341 23.1592 69.0825 23.1987 69.2559 23.2407 cv
69.5293 23.3037 69.7671 23.3682 69.9692 23.4341 cv
70.1714 23.4995 70.3398 23.5771 70.4736 23.666 cv
70.6079 23.7554 70.7075 23.8608 70.7734 23.9814 cv
70.8389 24.1025 70.8716 24.2495 70.8716 24.4229 cv
70.8716 24.8066 70.7246 25.1113 70.4307 25.3374 cv
70.1362 25.563 69.7397 25.6763 69.2407 25.6763 cv
cp
f
72.9287 25.1563 mo
73.1758 25.1563 73.4058 25.1099 73.6187 25.0181 cv
73.8311 24.9258 73.9927 24.8037 74.1035 24.6519 cv
74.2031 24.5518 74.2529 24.4492 74.2529 24.3442 cv
74.2529 23.7373 li
73.9165 23.606 73.5674 23.54 73.2046 23.54 cv
72.8584 23.54 72.5757 23.6138 72.3574 23.7607 cv
72.1396 23.9077 72.0308 24.1001 72.0308 24.3364 cv
72.0308 24.4517 72.0527 24.5596 72.0977 24.6597 cv
72.1421 24.7593 72.2046 24.8462 72.2866 24.9199 cv
72.3682 24.9927 72.4639 25.0508 72.5742 25.0928 cv
72.6846 25.1353 72.8027 25.1563 72.9287 25.1563 cv
cp
72.7476 25.6763 mo
72.5532 25.6763 72.3716 25.6431 72.2036 25.5776 cv
72.0352 25.5122 71.8901 25.4214 71.7661 25.3057 cv
71.6431 25.1904 71.5454 25.0552 71.4746 24.8999 cv
71.4033 24.7451 71.3682 24.5752 71.3682 24.3916 cv
71.3682 24.2021 71.4102 24.0298 71.4946 23.875 cv
71.5781 23.7202 71.6978 23.5874 71.853 23.4771 cv
72.0078 23.3667 72.1924 23.2803 72.4048 23.2168 cv
72.6177 23.1538 72.8501 23.1221 73.1025 23.1221 cv
73.3022 23.1221 73.5044 23.1406 73.709 23.1772 cv
73.9146 23.2144 74.0957 23.2642 74.2529 23.3271 cv
74.2529 22.9966 li
74.2529 22.6597 74.1587 22.396 73.9692 22.2041 cv
73.7803 22.0122 73.5122 21.9165 73.165 21.9165 cv
72.7505 21.9165 72.3145 22.0767 71.8569 22.397 cv
71.6284 21.9482 li
72.1592 21.5903 72.6924 21.4121 73.2285 21.4121 cv
73.7695 21.4121 74.1914 21.5562 74.4937 21.8452 cv
74.7959 22.1343 74.9468 22.542 74.9468 23.0669 cv
74.9468 24.7461 li
74.9468 24.9092 75.02 24.9927 75.1675 24.998 cv
75.1675 25.5972 li
75.0938 25.6079 75.0332 25.6157 74.9863 25.6211 cv
74.939 25.6265 74.8892 25.6289 74.8364 25.6289 cv
74.6992 25.6289 74.5903 25.5884 74.5093 25.5068 cv
74.4277 25.4253 74.3794 25.3267 74.3633 25.2109 cv
74.3477 24.9199 li
74.1636 25.1665 73.9312 25.354 73.6499 25.4829 cv
73.3691 25.6113 73.0684 25.6763 72.7476 25.6763 cv
cp
f
77.9102 25.0771 mo
78.0576 25.0771 78.1992 25.0508 78.3359 24.998 cv
78.4727 24.9458 78.5986 24.876 78.7148 24.7896 cv
78.8301 24.7026 78.9277 24.6045 79.0059 24.4937 cv
79.085 24.3838 79.1377 24.2705 79.1641 24.1548 cv
79.1641 22.9727 li
79.1055 22.8306 79.0313 22.7021 78.9395 22.5864 cv
78.8477 22.4707 78.7432 22.3696 78.6279 22.2827 cv
78.5127 22.1963 78.3877 22.1294 78.2529 22.082 cv
78.1191 22.0342 77.9844 22.0107 77.8477 22.0107 cv
77.6377 22.0107 77.4492 22.0557 77.2842 22.145 cv
77.1182 22.2344 76.9775 22.3525 76.8623 22.5 cv
76.7461 22.647 76.6572 22.8135 76.5947 23 cv
76.5313 23.187 76.5 23.3745 76.5 23.564 cv
76.5 23.7686 76.5361 23.9629 76.6104 24.147 cv
76.6836 24.3311 76.7832 24.4912 76.9102 24.6279 cv
77.0352 24.7642 77.1836 24.8735 77.3555 24.9551 cv
77.5254 25.0366 77.7109 25.0771 77.9102 25.0771 cv
cp
77.6982 25.6445 mo
77.4189 25.6445 77.1631 25.5869 76.9287 25.4707 cv
76.6953 25.3555 76.4941 25.2007 76.3262 25.0059 cv
76.1582 24.8115 76.0273 24.5884 75.936 24.3364 cv
75.8442 24.084 75.7983 23.8213 75.7983 23.5483 cv
75.7983 23.2593 75.8442 22.9844 75.936 22.7241 cv
76.0273 22.4639 76.1582 22.2373 76.3262 22.0425 cv
76.4941 21.8481 76.6953 21.6943 76.9287 21.5815 cv
77.1631 21.4683 77.4219 21.4121 77.7061 21.4121 cv
78.0518 21.4121 78.3516 21.4956 78.6035 21.6641 cv
78.8564 21.832 79.0693 22.0449 79.2422 22.3022 cv
79.2422 21.4824 li
79.8574 21.4824 li
79.8574 25.5498 li
79.8574 25.8442 79.8027 26.1025 79.6914 26.3267 cv
79.582 26.5498 79.4316 26.7378 79.2422 26.8896 cv
79.0537 27.0425 78.8311 27.1577 78.5762 27.2368 cv
78.3223 27.3159 78.0498 27.355 77.7607 27.355 cv
77.293 27.355 76.9131 27.2749 76.6221 27.1147 cv
76.3301 26.9541 76.0869 26.7324 75.8931 26.4487 cv
76.2949 26.0938 li
76.457 26.3354 76.668 26.5166 76.9258 26.6377 cv
77.1826 26.7588 77.4619 26.8188 77.7607 26.8188 cv
77.9502 26.8188 78.1299 26.7925 78.3008 26.7402 cv
78.4717 26.6875 78.6201 26.6089 78.7461 26.5039 cv
78.8721 26.3984 78.9727 26.2671 79.0498 26.1094 cv
79.126 25.9521 79.1641 25.7651 79.1641 25.5498 cv
79.1641 24.8247 li
79.085 24.9507 78.9912 25.0649 78.8838 25.1675 cv
78.7764 25.2705 78.6592 25.3564 78.5332 25.4277 cv
78.4072 25.499 78.2734 25.5527 78.1309 25.5894 cv
77.9893 25.6265 77.8447 25.6445 77.6982 25.6445 cv
cp
f
84.208 23.2642 mo
84.1914 23.0698 84.1436 22.8901 84.0625 22.7241 cv
83.9814 22.5586 83.8779 22.4185 83.7549 22.3022 cv
83.6309 22.187 83.4873 22.0967 83.3252 22.0308 cv
83.1631 21.9648 82.9883 21.9321 82.8047 21.9321 cv
82.6211 21.9321 82.4473 21.9648 82.2852 22.0308 cv
82.1221 22.0967 81.9785 22.188 81.8555 22.3066 cv
81.7324 22.4248 81.6318 22.5654 81.5557 22.7285 cv
81.4795 22.8911 81.4336 23.0698 81.418 23.2642 cv
84.208 23.2642 li
cp
82.7969 25.6763 mo
82.4873 25.6763 82.2031 25.6196 81.9453 25.5068 cv
81.6885 25.3936 81.4678 25.2397 81.2842 25.0454 cv
81.0996 24.8511 80.9561 24.624 80.8545 24.3638 cv
80.752 24.1035 80.7002 23.8291 80.7002 23.54 cv
80.7002 23.251 80.752 22.978 80.8545 22.7207 cv
80.9561 22.4629 81.1016 22.2373 81.2881 22.0425 cv
81.4736 21.8481 81.6963 21.6943 81.9541 21.5815 cv
82.2109 21.4683 82.4951 21.4121 82.8047 21.4121 cv
83.1143 21.4121 83.3965 21.4702 83.6523 21.5854 cv
83.9072 21.7012 84.124 21.855 84.3027 22.0464 cv
84.4814 22.2383 84.6191 22.4614 84.7158 22.7163 cv
84.8135 22.9712 84.8623 23.2354 84.8623 23.5088 cv
84.8623 23.5664 84.8604 23.6187 84.8584 23.666 cv
84.8555 23.7134 84.8525 23.7505 84.8467 23.7769 cv
81.4336 23.7769 li
81.4492 23.9814 81.4971 24.168 81.5752 24.3364 cv
81.6543 24.5044 81.7568 24.6489 81.8828 24.7695 cv
82.0088 24.8906 82.1523 24.9849 82.3125 25.0532 cv
82.4727 25.1221 82.6426 25.1563 82.8203 25.1563 cv
82.9473 25.1563 83.0703 25.1387 83.1914 25.1045 cv
83.3125 25.0708 83.4248 25.0244 83.5293 24.9663 cv
83.6348 24.9092 83.7285 24.8379 83.8096 24.7539 cv
83.8916 24.6699 83.9531 24.5752 83.9951 24.4702 cv
84.5938 24.6357 li
84.5254 24.7881 84.4326 24.9277 84.3135 25.0532 cv
84.1963 25.1797 84.0596 25.2886 83.9043 25.3804 cv
83.75 25.4727 83.5781 25.5444 83.3887 25.5972 cv
83.1992 25.6499 83.002 25.6763 82.7969 25.6763 cv
cp
f
91.3184 24.0288 mo
91.3184 23.9023 91.2959 23.7803 91.251 23.6626 cv
91.2061 23.5439 91.1455 23.4404 91.0703 23.3506 cv
90.9932 23.2617 90.9023 23.1904 90.7988 23.1382 cv
90.6934 23.0859 90.5771 23.0591 90.4512 23.0591 cv
88.4492 23.0591 li
88.4492 24.9824 li
90.3965 24.9824 li
90.5264 24.9824 90.6475 24.9561 90.7588 24.9038 cv
90.8691 24.8511 90.9658 24.7817 91.0498 24.6948 cv
91.1348 24.6079 91.1992 24.5068 91.2471 24.3916 cv
91.2939 24.2759 91.3184 24.1548 91.3184 24.0288 cv
cp
88.4492 20.6162 mo
88.4492 22.4839 li
90.2305 22.4839 li
90.3564 22.4839 90.4717 22.459 90.5771 22.4087 cv
90.6826 22.3594 90.7734 22.292 90.8486 22.208 cv
90.9248 22.124 90.9863 22.0254 91.0303 21.9121 cv
91.0752 21.7998 91.0977 21.6802 91.0977 21.5537 cv
91.0977 21.4229 91.0762 21.2988 91.0342 21.1836 cv
90.9922 21.0679 90.9365 20.9678 90.8652 20.8838 cv
90.7939 20.7998 90.707 20.7339 90.6045 20.6865 cv
90.5029 20.6396 90.3926 20.6162 90.2773 20.6162 cv
88.4492 20.6162 li
cp
92.0361 24.1548 mo
92.0361 24.3706 91.9922 24.5674 91.9053 24.7461 cv
91.8184 24.9248 91.7012 25.0771 91.5498 25.2031 cv
91.4004 25.3291 91.2266 25.4268 91.0303 25.4946 cv
90.833 25.563 90.6211 25.5972 90.3965 25.5972 cv
87.7393 25.5972 li
87.7393 20.001 li
90.5225 20.001 li
90.7158 20.001 90.8926 20.043 91.0498 20.127 cv
91.208 20.2109 91.3418 20.3203 91.4521 20.4546 cv
91.5625 20.5879 91.6484 20.7407 91.708 20.9116 cv
91.7686 21.082 91.7988 21.2539 91.7988 21.4277 cv
91.7988 21.7065 91.7295 21.9639 91.5898 22.2002 cv
91.4512 22.4365 91.252 22.6123 90.9951 22.7285 cv
91.3154 22.8228 91.5693 22.9976 91.7559 23.2524 cv
91.9424 23.5068 92.0361 23.8081 92.0361 24.1548 cv
cp
f
94.1875 25.6763 mo
93.7549 25.6763 93.4297 25.5313 93.209 25.2422 cv
92.9883 24.9541 92.8779 24.5225 92.8779 23.9497 cv
92.8779 21.4824 li
93.5723 21.4824 li
93.5723 23.8159 li
93.5723 24.6567 93.8633 25.0771 94.4473 25.0771 cv
94.7305 25.0771 94.9971 24.9863 95.2461 24.8047 cv
95.4961 24.624 95.6816 24.376 95.8027 24.0605 cv
95.8027 21.4824 li
96.4961 21.4824 li
96.4961 24.7461 li
96.4961 24.9092 96.5703 24.9927 96.7168 24.998 cv
96.7168 25.5972 li
96.6377 25.6079 96.5762 25.6143 96.5313 25.6167 cv
96.4863 25.6196 96.4434 25.6211 96.4014 25.6211 cv
96.2646 25.6211 96.1514 25.5806 96.0586 25.499 cv
95.9668 25.417 95.918 25.3159 95.9131 25.1958 cv
95.8975 24.7144 li
95.7129 25.0244 95.4717 25.2622 95.1719 25.4277 cv
94.8721 25.5938 94.5439 25.6763 94.1875 25.6763 cv
cp
f
99.5947 25.0771 mo
99.7988 25.0771 99.9883 25.0352 100.162 24.9507 cv
100.335 24.8672 100.485 24.7539 100.61 24.6123 cv
100.736 24.4702 100.834 24.3086 100.902 24.1274 cv
100.971 23.9463 101.005 23.7554 101.005 23.5562 cv
101.005 23.356 100.972 23.1631 100.906 22.9766 cv
100.841 22.79 100.748 22.6255 100.631 22.4839 cv
100.513 22.3418 100.37 22.2275 100.205 22.1406 cv
100.04 22.0542 99.8564 22.0107 99.6572 22.0107 cv
99.5098 22.0107 99.3711 22.0371 99.2393 22.0898 cv
99.1074 22.1426 98.9854 22.2119 98.873 22.2988 cv
98.7607 22.3857 98.6602 22.4868 98.5732 22.6021 cv
98.4863 22.7178 98.4121 22.8408 98.3486 22.9727 cv
98.3486 24.1626 li
98.375 24.2939 98.4316 24.4146 98.5186 24.5254 cv
98.6045 24.6357 98.708 24.7319 98.8252 24.813 cv
98.9434 24.8945 99.0703 24.9585 99.2031 25.0059 cv
99.3379 25.0532 99.4678 25.0771 99.5947 25.0771 cv
cp
99.7676 25.6763 mo
99.4473 25.6763 99.1553 25.5972 98.8926 25.4399 cv
98.6299 25.2817 98.4219 25.0771 98.2695 24.8247 cv
98.2695 25.5972 li
97.6543 25.5972 li
97.6543 19.8438 li
98.3486 19.8438 li
98.3486 22.3022 li
98.5225 22.0342 98.7354 21.8188 98.9863 21.6563 cv
99.2393 21.4937 99.5332 21.4121 99.8701 21.4121 cv
100.153 21.4121 100.408 21.4727 100.635 21.5933 cv
100.86 21.7144 101.054 21.8726 101.214 22.0703 cv
101.374 22.2671 101.498 22.4956 101.584 22.7559 cv
101.671 23.0156 101.714 23.2827 101.714 23.5562 cv
101.714 23.8452 101.664 24.1182 101.564 24.376 cv
101.465 24.6333 101.328 24.8574 101.155 25.0498 cv
100.981 25.2412 100.774 25.3936 100.535 25.5068 cv
100.297 25.6196 100.041 25.6763 99.7676 25.6763 cv
cp
f
104.505 25.0771 mo
104.709 25.0771 104.898 25.0352 105.072 24.9507 cv
105.245 24.8672 105.396 24.7539 105.521 24.6123 cv
105.646 24.4702 105.744 24.3086 105.813 24.1274 cv
105.881 23.9463 105.915 23.7554 105.915 23.5562 cv
105.915 23.356 105.882 23.1631 105.816 22.9766 cv
105.751 22.79 105.658 22.6255 105.541 22.4839 cv
105.423 22.3418 105.28 22.2275 105.115 22.1406 cv
104.95 22.0542 104.767 22.0107 104.567 22.0107 cv
104.42 22.0107 104.281 22.0371 104.149 22.0898 cv
104.018 22.1426 103.896 22.2119 103.783 22.2988 cv
103.671 22.3857 103.57 22.4868 103.483 22.6021 cv
103.396 22.7178 103.322 22.8408 103.259 22.9727 cv
103.259 24.1626 li
103.285 24.2939 103.342 24.4146 103.429 24.5254 cv
103.515 24.6357 103.618 24.7319 103.735 24.813 cv
103.854 24.8945 103.98 24.9585 104.114 25.0059 cv
104.249 25.0532 104.378 25.0771 104.505 25.0771 cv
cp
104.678 25.6763 mo
104.357 25.6763 104.065 25.5972 103.803 25.4399 cv
103.54 25.2817 103.332 25.0771 103.18 24.8247 cv
103.18 25.5972 li
102.564 25.5972 li
102.564 19.8438 li
103.259 19.8438 li
103.259 22.3022 li
103.433 22.0342 103.646 21.8188 103.896 21.6563 cv
104.149 21.4937 104.443 21.4121 104.78 21.4121 cv
105.063 21.4121 105.318 21.4727 105.545 21.5933 cv
105.771 21.7144 105.964 21.8726 106.124 22.0703 cv
106.284 22.2671 106.408 22.4956 106.495 22.7559 cv
106.581 23.0156 106.624 23.2827 106.624 23.5562 cv
106.624 23.8452 106.574 24.1182 106.475 24.376 cv
106.375 24.6333 106.238 24.8574 106.065 25.0498 cv
105.892 25.2412 105.685 25.3936 105.446 25.5068 cv
105.207 25.6196 104.951 25.6763 104.678 25.6763 cv
cp
f
107.491 19.8438 mo
108.185 19.8438 li
108.185 24.5332 li
108.185 24.686 108.226 24.8047 108.307 24.8916 cv
108.388 24.9785 108.503 25.022 108.65 25.022 cv
108.708 25.022 108.776 25.0127 108.854 24.9946 cv
108.934 24.9761 109.007 24.9541 109.075 24.9277 cv
109.187 25.4868 li
109.07 25.5342 108.934 25.5737 108.776 25.605 cv
108.618 25.6367 108.479 25.6523 108.358 25.6523 cv
108.09 25.6523 107.878 25.5762 107.724 25.4243 cv
107.568 25.2715 107.491 25.0586 107.491 24.7856 cv
107.491 19.8438 li
cp
f
112.961 23.2642 mo
112.945 23.0698 112.896 22.8901 112.815 22.7241 cv
112.734 22.5586 112.632 22.4185 112.509 22.3022 cv
112.385 22.187 112.242 22.0967 112.079 22.0308 cv
111.916 21.9648 111.743 21.9321 111.559 21.9321 cv
111.374 21.9321 111.201 21.9648 111.038 22.0308 cv
110.875 22.0967 110.732 22.188 110.608 22.3066 cv
110.485 22.4248 110.386 22.5654 110.31 22.7285 cv
110.232 22.8911 110.188 23.0698 110.172 23.2642 cv
112.961 23.2642 li
cp
111.551 25.6763 mo
111.24 25.6763 110.957 25.6196 110.699 25.5068 cv
110.442 25.3936 110.222 25.2397 110.037 25.0454 cv
109.854 24.8511 109.711 24.624 109.607 24.3638 cv
109.505 24.1035 109.454 23.8291 109.454 23.54 cv
109.454 23.251 109.505 22.978 109.607 22.7207 cv
109.711 22.4629 109.854 22.2373 110.041 22.0425 cv
110.228 21.8481 110.45 21.6943 110.708 21.5815 cv
110.965 21.4683 111.249 21.4121 111.559 21.4121 cv
111.868 21.4121 112.151 21.4702 112.406 21.5854 cv
112.661 21.7012 112.878 21.855 113.056 22.0464 cv
113.235 22.2383 113.373 22.4614 113.47 22.7163 cv
113.566 22.9712 113.616 23.2354 113.616 23.5088 cv
113.616 23.5664 113.614 23.6187 113.612 23.666 cv
113.608 23.7134 113.605 23.7505 113.601 23.7769 cv
110.188 23.7769 li
110.203 23.9814 110.25 24.168 110.329 24.3364 cv
110.407 24.5044 110.51 24.6489 110.636 24.7695 cv
110.763 24.8906 110.905 24.9849 111.065 25.0532 cv
111.226 25.1221 111.396 25.1563 111.574 25.1563 cv
111.701 25.1563 111.824 25.1387 111.945 25.1045 cv
112.066 25.0708 112.179 25.0244 112.284 24.9663 cv
112.389 24.9092 112.482 24.8379 112.563 24.7539 cv
112.646 24.6699 112.706 24.5752 112.748 24.4702 cv
113.348 24.6357 li
113.279 24.7881 113.187 24.9277 113.067 25.0532 cv
112.949 25.1797 112.813 25.2886 112.658 25.3804 cv
112.503 25.4727 112.331 25.5444 112.142 25.5972 cv
111.952 25.6499 111.756 25.6763 111.551 25.6763 cv
cp
f
115.83 25.6763 mo
115.499 25.6763 115.173 25.6245 114.853 25.5225 cv
114.532 25.4199 114.257 25.2715 114.024 25.0771 cv
114.325 24.6123 li
114.566 24.7959 114.809 24.9341 115.05 25.0259 cv
115.292 25.1177 115.546 25.1641 115.813 25.1641 cv
116.114 25.1641 116.351 25.1045 116.527 24.9863 cv
116.704 24.8682 116.791 24.7017 116.791 24.4858 cv
116.791 24.3862 116.768 24.3003 116.721 24.23 cv
116.673 24.1587 116.603 24.0972 116.508 24.0444 cv
116.413 23.9922 116.292 23.9448 116.146 23.9023 cv
115.998 23.8608 115.827 23.8159 115.633 23.7686 cv
115.387 23.7056 115.173 23.645 114.994 23.5874 cv
114.815 23.5298 114.668 23.4614 114.554 23.3823 cv
114.438 23.3037 114.354 23.209 114.301 23.0986 cv
114.248 22.9883 114.222 22.8516 114.222 22.689 cv
114.222 22.4839 114.263 22.3013 114.344 22.1406 cv
114.426 21.981 114.537 21.8472 114.679 21.7393 cv
114.821 21.6313 114.988 21.5498 115.18 21.4946 cv
115.371 21.4395 115.578 21.4121 115.798 21.4121 cv
116.108 21.4121 116.397 21.4619 116.666 21.5615 cv
116.934 21.6616 117.159 21.793 117.343 21.9561 cv
117.028 22.3735 li
116.854 22.2212 116.66 22.1069 116.444 22.0308 cv
116.229 21.9546 116.009 21.9165 115.782 21.9165 cv
115.53 21.9165 115.315 21.9702 115.14 22.0781 cv
114.964 22.1855 114.877 22.3579 114.877 22.5942 cv
114.877 22.689 114.894 22.7681 114.927 22.8306 cv
114.962 22.8936 115.018 22.9487 115.097 22.9966 cv
115.176 23.0439 115.276 23.0859 115.4 23.1221 cv
115.523 23.1592 115.673 23.1987 115.846 23.2407 cv
116.119 23.3037 116.356 23.3682 116.56 23.4341 cv
116.762 23.4995 116.929 23.5771 117.063 23.666 cv
117.197 23.7554 117.298 23.8608 117.363 23.9814 cv
117.428 24.1025 117.462 24.2495 117.462 24.4229 cv
117.462 24.8066 117.314 25.1113 117.021 25.3374 cv
116.726 25.563 116.329 25.6763 115.83 25.6763 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 22.1.0
%%For: (ilya chaluk) ()
%%Title: (0422.eps)
%%CreationDate: 3/26/2018 11:35 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB7&o'e+!6[YA=.?U_<fL0<*TgKJZ4jmfj1['GJVLHhPAKgY\.KA3t:AHT!-.BK$1WZ)#e>OXr.<Wb0"G2Hj,2r+dNFKjoud
%KkM(4d&d$*+,c'S`gP\3$RE`;=lN[Wr!S(RbYl3T[sIk1=jjq<UtIF`h2P8%QduKaCK7m=Kl6NP_u'hf8sXtL(_&W<G+)Sf,fD-:
%aZe\<0"M#n\"`?$?@9mRTrOd[H8$+J'nJ$0mAXW/BRHb[gn!\0UYG*J4i;)!6kH;['s+8?H<[^.5[t`V)TiCl%&NTReo12^5!pA*
%I-j?hW/519f1%W'I$XgRdC<"rZ$t)`>N(e`NW/ObhL7iLR1L=sXFBa9'^C=U!!FdinSjo$DkQ!0J8/-S+OLUhlcjT?lfjdG&g-:f
%BJ^[+&CLD?SK!(h(c]N#QSF&S/./^=6ALPA'J7t1*f]h7LAl6=['+7V]jh^Tl1>>&h`s0>)`1@DeS"i8hRR;;4d\71+k`U/Z!#Ws
%!:AU6BkWmF"JY[p%<8OnWd52cdVSOf.0)TT\TZD>*biB2`,`6@8Zo2)cHT!E:d?PV#db#9@&UTN85+i#dio%'.e$n<Amg2og_h3.
%)5h7D?b6Ei)J[I["j9FX\2)YjW^^bK-F9Wefk/mMN`#NF<FeFZo`mDrQ\bZQkC7j20F>FahK&+YRA]+#_>.(.\:D.c\&q:KM5\fj
%5?6Y;(5P>qXP-ah+8?a2d;RdLi/4EG'5fL-W8Tu@33fVX:\dI%0(*l+IQQ;aR",+?U6Nos*]c&[HH<Z7_H.tU'jRYZH9]YL*I_VD
%]&lS,>Vk)r$&o_cHEU9eCt>cf-OjGJV4Q?@DCgQ``>A<#>!Y1pFPbD;J2-tF@=g<A<9ZC;_nGiCo5B`f6,C@p]`tRlFR+_=0\]"5
%(0lq:o*qguFkfQ0W:U1pBL#S$8Hc!dXol'<XPJVF_6*Kh1(f&H1ngsfYM[e:RJb#F,'I0@_=SY*#5eJ7cnI_['M9C@(hd7I>-A]>
%)g\R?FU)XZoHjQ4MH(Ig`M<]JW-5Okbp\:q:;:!@SXX6/D10KJ[jU_b^4bn_,RD/R7C-EERr1/q9cc^=-oLY6YAR,H`Z.O)FBZ5@
%2*Z#aYQ4q?!$uI;o<-L@\%T=r%I4<QI\g?X,s4!$qX@j4qm!3"Wu!>7=*[H5YDb6\>+qiOgWm!HaYW(DFP-ZU4@0@6KdlrL^j6t<
%`<jtQBN6cjTP[#L^<tCm!B6KbjS"<826EujnT,f\?Bb:#fN?RV`a[u1Wt805,fF"Z.iVm12aT$AAtod:>5s2,^kUA0T7>Ypq8_'Y
%Io+^OFpg[B:`,pO=1mGcgRiu^i&4]'j]R-L=c$/2,b&7!*6$;FbOM+<M4DF/\J1Ch.A#Z>T&ht=i$D^l'gBa;S2N.dPKosZ8\:cR
%P<Wc^i&3!e)>=1b.AA)EU(Tm\`>M9G8]jUR.40`oTB)/OP"F(n$Gb))8kl=C.]\^^We/BoSB@jj8uiZ]SlS`]dV4?n.05;s8Piqi
%JYH%6-n-VT,su6O(=<B"ALJN-F$g>B#XuUIE1t5u[:?V`$l&E[2qB8nqhBK:b)dB';@&S>(?p@'#mU-a(5J/6+,;In[aBJDp,<cL
%S[46)$]g3Zs0?<I(!/$O/R&B^P\Gh"W`tWS8\$,L-#FB+124558/^`GI^*eLLr-bm+Gs\GOcbKp0Yl<(0,0["8[kMOP48lP\V1k'
%Ma,Kl$7R,M!fMtqaGQK9LnZ;SZD`RN0dW]JnS&gM/+JcFM39D=;Gp+YBpjQe@qAEtAO2VmoMK.!:<K4:jKtEX;.1/>i=nQi'hM7:
%<<7XRfh*b4Q%Fj(60`]V4pg9]/un-!"Na?<)45.CjHTtlKg?tMP!G&hUmat(;opl['FGM)J\n:/-pgO"8LZZri1d*3WDk@,'Enak
%N@0F6_Em/0J8?--9Zq,rXeq<H<#U0?)(a"A^pHB.9a=+;,!qDI1)-NkOIi]k)t!\5HlU[*iu*Ol:_AN#]7hI:lP>P/1f5[%5`6>U
%rW"mTOIr=Q<2(dYOkg*6_gFI5FGiBuhCT^E=LTtP!GXlXQ=s*$+k1Vf/]9?,hFAk!Ae^"^JVP'R8.)4Y%7<nmO"%k[Ot6[ln\BW*
%L^,M1;FX7\1.b%@%[A=HGZ=a8ja_Cii*ZnJQj+6jZ\p=&[L>8N!jD42nLSWC/Q+k!1a&A(<'_+,5nZRO&9ra>=:e,/TR\'20HE_k
%"d:<dknCl5niZ[0+(,Kp:c9#S!MZI,9WDJOAPN<%.=gsL^k=J9Qmc@C1e_2<<PcJn?tMh][lhib0J]<<.$3(<9IGc2,[1;K7p8.X
%rP4!2,#(C4Xcif\Uk4ViYm(lGk$p^%d%E'K^b.>2@&78R^h*UN'^r@ri%IoHM@s#$V%m*`UM-0!J-fe3S9Bu?$76M%#U7=<n1Q)/
%1bFEK&5S"Q&(D._/j0*]G1<ZP(/Q:Y>\5Ak<"I9&+D>GDk!aA2/IRek)t37oI<RaNaXi@)8r5*[13%;o&O_qkDjDhYP45DYnBa51
%g#)*cmRM]+.F0A`r43KS?FEilW[@<1lu*"*T'ZY`:6,hK8H`T.r!1B&!hGPW8Q2i+ifS6^Q'&q`5Q\da>[L44Q(*=(7tnj(/VA2(
%Jm1JIMnr"5M,f@^Q%3Y+J]3^D"RZhEKNN&2'k#As2L?(@E=*X,%XXKKY^[S(9&rp.DB"5".<9ntm!=M3qap-f1"bOpfMj4a&>0Q3
%%:o1*+63_No>]IT/Fm@`kZ,V$/CLnk:WpNZcj+p+Y5dhDDm_j=JQf>4+^;8+K%?GM-7C+2.N28SK+9-Y)%%<L%N@_@e06YuQMG$@
%%Qp\+AG!+:"%.X`*&;J@SK616NLFG&"AEfG`1REL]DtFS`YS7,R+\i`@ThHq>.l2D;0Da:1[=XdqZ.<p+*MQ?O1s[fLf68%U$Xgo
%EB1o+@6!SVl^!0A1:3*lrp`"O:*5+GJ#q?7T_*fq>da%oiO/Wmos\OEY`C`V5Td.SED7pU!KJ%Q(u"O/Z-Q'O,FcN(2N@Zg,W<+]
%2Rs0<nK_@-Cj_B@70WP'Af)Cpk,kVFJ79_NLY,^;D(UVbBZi@DM*l"k.O:$C\eC#CQjTWdGtt6(@2A$5C!JI:Z=>4lOeR+:Blk,h
%JLqVU8J8%s*?.J#;J/j2]Z<?R6`e\Md[W0M&SVU%P_cs_bF2>=&S,X%n4c_h/6Gg_blHr]MO34(WdiOB3t55ar[UA]HY%UC0NZmg
%Qi4Y/l^_7o\R9^F=J],k\a>kJW[6[D0(@Fo:m`HrTaHZ6K-M'?<31bJ',6q/\3pISKm3_W*Y"(R6Q@<1-j7L2N66QNFjS(AZlQid
%:'=td0A\2Q2dU(r+4JJF0KB!;EYhdM!e%-YL6KNZZ5@a+_p)_f!+/_l+*l5G8Cg;N0qBMfDFpQ_KS"ds$5XTcTr]:'nQ>PiQsVB3
%PHfF15n2cI%n[`V'E]Pu_I,fb@R2'05njj(Leu*d;Mhp1M@:pRFsB\269%G&;'J[]NYJTt;6aV"*%bVU8`?$K))>_T3A>)`oSAD6
%S\Qg2QUu!];`GQ7fTD%-9sQb$Z!p>AMCVsK_i!!,]bdnSNf&WUFMX!i75A2i-&JC=e@66eVm)5C@ruB=j2U5Ij2&7N#DX<H*kNN8
%!C7&u`ec_!%8jCA:ZG7[M$?S"JF^\)#`%4djP$96*@a<4V!kQ#5mUZQ-aM2X:?F8:S4=Z/<A8A)Z4L[V_'#Gn5kZ2-'.521Ue79[
%>@TQV,_`5;@4nk^ZsOI82&&ug33H.5hohD]-/=6*,ll$eLYHDl8\hWn_'(Ut#>68F9\:]E16de:`hq0AQ@n>J0po+@-;>hS8C(t4
%&Xb:!_fU8FP7<MorqsZob9f\jfVLloNbb.>^[nlr4,()#PP0!Z;j:8r/+JHZG!"?cJnP]00_^n2.gd%j"UdDX6&Q_C1Vh[AlF6qf
%6]h"'"B`tJ/qN5-#rp6O_!Wn9F9p;A=KA7%A":K+7`"MtD!N8W]?/,k7]nM(gf^-S6`E*R]?M4`=@lY8]JX'1HjZ9=nRkikA6+)'
%'ccmsXn(XThI]cBjAQ7<.D?c/[)`bg:PcZ?QSTN#Q2#DG"1aO>-AASV,cp/s9@0p*j0:\liN+tr1Z(P>1RT%n#5KIYM%I&RE#BiB
%hV)'4D?4dG^alXZW$/=r#90mP*!u7s'g-O[+2"pS,n=OW&Q)aV7"5h^4%9:]0G$kjDW"$&[sA7,6"(:["r5<QcAgbB0eu3fQ71f`
%8oD((Nq3g$pfskLd)ZG3/&lS1)!"dRKOa,`^#Phn1?N`'JqQjMC9?aY<?8HD")\N*"G1Ipd-?XKq'cK)3!3o`[e&"7&J.3Y9=>Et
%$9j<0a^>6J3gn!*)RKeHQUdM$9e<?4?W0L_-+pO8*B<,siD+Be=gX_5a!"$"%LFPV6&1-6mYL(&7,*_m`cXZh=+nJo#]I=!i/E2L
%PR3+5[FM2:R&$gZ[I'JD%LO\O11gh]mAOoY[;Dg1FT!]B/W*cFO!EVL;r]Mjc%GQf[]AF&qFtCQ(3Xp'28TeOr7g5Bb%Z4]/+%d1
%s/,0P1$:44WMd#cbBSN!0shbA:r41k8,S^n.jsCbf)Ekhr]84deq/roA??"W!Gt,D(O\^LY=SR(EPb\nM,VOqX5F.(M`kTe^_L\,
%SV8.>GM'8MZ/'@8IdkK_``_Z5Q[1W<I>.DIn2Le;Y,_h+MqEI)<HP=S@iYc>F6n$%E[f')!.Agpb&SE&,.U-cMsEkE9]0LS1JU6b
%$FYPp*$oXEMBb@<A&F<R.cN^U#7A["V[P"A(sq_:@cKCr.9Cr(QohOBMd7GC]0-5@IrP+e_Pi0B@7pu\q)ikH!SeLFF\fZ_*Z=m<
%i?,VSi!"[<(^TO_\BP`Hr2OYsaich-fdA:;jQ),e*7Pq:f+&7k>Z&KN*0Q[*'[.Mfo4tnOXoiLP^hGldESOsTk$l^IL,d$rVChVJ
%*Fh`k<*QqE>OicUjD@J#nZjcWlN4.6/.I4($hf[dqi![ElpP?u&f5A'E)$s)eMn1,"aGiEZ\NH8]STmhlV9Jn+h>8J\UUF8k;dqN
%Jskfai<f*/MnO-"8E\8R32C'Yeu]#UA$,.0F`qL"V[)_`=?@\SG+p+5jWeIe%'67UJu(oEP6Xq"Z<3F8MUMF]LHkDJ(O2b3Pt$jC
%-iCbKnHC%1#U7sQf*OjH:kU1t&gnq*=bRV/,$/K6-W[LYQ<pNLKI\K1BLriI9KRJ"0>\S<q2pIWqMHt'pjlo96/NIOD/iWb34lBs
%L%,n(TMT/BpW*@7U43D4WI^3P."`"biY?,=r@>W3d[MGp.DhPU$4U2"I>*#HfHGqd;X@d$>,6oYG@^4qTFY7!-OL=b7t$P1ME7b&
%MuL]j;+1suHqX6EbM1B>KYU;Od0om6:_MTE?bfD!7$OpALfCTCk^3'+<mZOEGT7mtX<]k>,2V)B,jT"l+3fI@0eRDnGTqJ4d-^91
%Zn;foU%_BZAUbZ?@:P(bZa5eFY*Gfr>K,:!i[iM<$YUrX-t!]sjhBP^2^\h>XeE1"+HUW1qlFs?PbYTi6.nfNC;F3>qfr*daG8Do
%8#2mb'@MN6?\9k.mL#>n[:mdm$1%$$>:/,S;dC>/-F!Cu=^KfsE"*3@q8!b)Z&-S[*E=(8AoO8ri^:go1-hgQG9%5bTo?VV8[7_V
%j+R[Aa-P;B-PS^U!\Fh>fR2[2G`:@T13BRSRn=B#Hd90.Z*uiWEG[VBeO*C*"E4WXSAa?2<jWX'A5U:^a.W)U[!]eonkR/XU!%R#
%DSsmAJdg8X"URc7P?F&GEX.$_G*nq.(IJu"5'F]3-j#CJUT;$m8K9s^@H*g-7A'rP^0Q3bf_t9g>1UT388Ho9"ucaMNq-C5R4$g%
%VnCD.hM)GS(T`M'HT9b7,TJe=h2rSpFeli2@DK,[m(IIt]gF_Mf\X!AHd;H^GL7R(#<O^jm%Po\kn(*5_.)G#@Ip&,AlleY\`gCc
%DS,#e'`N^g:E6_iN%![NOb+=\Mam\)$a_>:gQ`Kt<g!]&hbc'P%B9$EL>kl+d<I;nD^YJt]M@eZ-09*':NG&-^&=au;O)+n>d`")
%3.^6@AS^s8[eH#`m/<`=[:\XVkJ9<X0ML@B+`D;!O`5-0N7_FYq=^/$4&#0*[_5`"XCTfJ/lU&=D65[4X8&5sa,RO_m%iZeJh*=r
%GGO5pDei_FJ6[n?Mt#R)/R%',%i0&e&:r+$1)T_D/9kCHkQ!&VEJ#[@?euLKfs$Z/7&oGmm6Gem6pin^I:NS_]+-lI.oO/'W.4e$
%Yho2:GG&D&1jl.K^DiGM72^%&@/q6b+")*rOj>_'k@rk$ls65klZp>#Qcaja,!"C83M&S-bcpK26#X#T5T+7YZ%8ki38"<KOMr;D
%#kOh^XrA`J#k*/t#X(7C=VhI4HPrU+6VhI#]AGspnE]rGkeo%<pj:.3Tr4oucE@P@2FB!E2&e-W(t3fEN`#0;oPPq]#(T=DUCG))
%C.=uRd9@H>$*@iE4msTke,+h?Z\")c5h3hEBY=D*[]4eL+'PFX6iBE6P`5ZYBh\sB#%5?N9f4[`h5JnN!O-PD578JXqkQ(&2=66l
%N0I0LJ.MeY/7a?/k#VO&IXN7E-@W+g31sb:7MRKLpah."\G;eqR8BY4-^"5JrA&)We#!d_At`l08u!(A0b7OuLX,Js6=(c+B9AOK
%N)cq9ba!M.O$H6u^n8WPEJgBI<`/2JR?%:#f3>'oRUuR!Z]OMG42o=_FnBRd&]CV.J=hZn^B%95:I`L<CEcAgj8WZ>oXIaof(8b6
%,eSpFO.Z;F+\TZ<G=q_'Fc]&mGG>nkh.TNpe/5;blHkRso6H.NS7r$6Z`SGYT%OF#M[0+#nq,28ki,M`!f5$<)?oiD-4aKIV,p!Q
%ZVYQ)OSO3r*&e8eAte!:&S`*(IG%FLJ1gYLTj3+Yf.<)SL.JJqd=>F>-`5:^`H'G'oObA`/=)dEEaLnoj1\GC(C6G4'[*KP&%ti=
%Bk?o![of/Y1#F+N$\lUoNd!&'O&HMF_!hR7E4W`'9)i>X<sJkcgIUh[_Q2>QO0Vab0G+"Q047TAGIrU\;Fb4Uh0sE!Z?unV.0n7P
%jhEti#I@=mlFepBoG%Jj+G:&1A';VN?.O(a4u4Yf4D&=N-Q$\m/E'\#r2bkf^O527=!L6S`eO@Aj9"]1kk7(QXeZb*=tkVWi1G]>
%H<j%D5>#h-U/%J_!2K[tq[KZkri9nEoMuO1hVRg;#R8=&BstT9m9TL4[sZSR,DI<<rsl;D+>j'-JB$K=L^"q,MgmYir`q]WhDAEL
%UL6Ze[GNp%Jh<um[__p*:/>981\H4C4#7jT^F&IK>_:WYa#%O]n$XV]^b;_n&cVVSb'j=h>p"cu%gREll+dM>Jc,X2p^>`<+?VM2
%&`obmpR/RO*e'mH2_p7oa6;'BH7t*BrLZ!.?SMh8:U^*_L@m>/HE;=j3h"/Dl0SW*+Q&A(^NC6s>sA:SmmPKFq2E1&$?l4j9s^O:
%FT(Y.$S0]@`?u4BVE@TM^[]rGN"81Qffl::PH+t@_mJ_?3Zd5?!-ET`5DYgiJ5].(0,%NTNJ83ZmJe\kQ,dL7>r*F321T,(_D(%4
%.'FbS?HeYcPYktg]Oo=P^C^=B='jeCl&6`UHl7Krc$$ouKl@8/N2`03!*4O5V>FI=;%R+[mh\*\+9:/Ed3B!M8CWt\27!AlB#a!m
%+u*h6b?$G_JLp$WDgD^TMJgcG76^GPOW[p%AJFW:J7X[M9l%0/7R:tVV-rilgKQiL5:+*sgACDeHcmd@S!;<;2meb)e6BUrXo0P?
%%ct?//JNO&Q1fWs9N1jHLpuXL:9u^DIQREIN_Bk5`0X?e9b!O!Yk7p[4R+2<MY;97@ahI:!_LM`MgBnq_:4BhO9\7ijImk#M"A6=
%/=AD1UIJC91'<3d!u*$PA&3S"OsJZa[u/RH"PZ2lpcN(*7SD>7Cr1oDYB4Rbfh4tgIMPf^Ziu#Lg\D.F@Np7'n=PDF8&lcB!;suN
%UM'K1KUN;F=]fBtTA$IK\cUAi:[8-_S/10uTu71$V]=at-k#=hcj8RDRR*HFoCHp7RB7S5;_%I0r@to8Hm1oX:U("%l'T^<`X%3F
%C1O$GN+S`^?i++Rp^RP8I=p1LoGr+L"@;%jUbQ?,Ca[@>#^7E-R!S"gm6hhY^R0VD-p\=mqgr$L^@@*lK?2Q/0fHAO-o:Jd)j0n*
%HVjjtd-9GG'#:RG,(!1=E7L:P^pC^&Zb7bc@WEf35l%!u;$*/aWOK4k@4t4a,ef4@TC#(855c6f8u>qEB7!L1\ti90(F9?,rg-ua
%o+h#L";84gBT:?6jju[Y0@2Vi)(!#Rq&s+#&AN?%T/hLAFag$II7iJi4.cH5r8Ukc?f17$ocVAkYB"*tm$*p+?Mfgj'4uRX]BQ^'
%,b=2-R9ocfH7ds(R[Le]rRBPFEn>EOUbf,2dq\@#C,9MigM+(ajK-V5g.\Q\9<41*6;RXPc@`=!g]C0c5@)P3;@A"20m^SOM)-jn
%0Ej6eRYfFb)!-aloL?QgrHe;M:GVK?L_$`'d\>`(TH0=$lt9c"T>)K4/*]>[6uOh[M!!YL'nZHEiB-tL#o>qcBZKL!3i&XJ2pIIT
%IXJOjC:\8(9[.*Y^=4;`P8*-FKUSU5btb55%Ji5DiqidIe/5<n?85WYhl5re:KuFsWB`udYb-X'mm"AFo-0:jSG4jVY0luim:%g&
%$b</u<;@'aodM66s7/)I.436f$idh?_P[=Knrh[BRpBt<Er?",[Jr!Xn;ZM)0>8d!FNF,$[D;[,D<eMpJ<XV.L]XN)UAP6e=4Tn#
%l,/(DDE<a1alL?jrG9XifL_Z\]+Te#7P2=MBYmK!D>[.A'P\Y`=)7*7+>1n<[#t9D$PDi<g=_[=ZR>^K@f?$_S96hrs7Kgq^U3uu
%8WQo&)/:rM)pHl\s*I_ZeXGs9Hni`Zc$-VYl\8!;2;`lcO4fujCs@18dofV@kaejONkf88juZf=rU+I8JMY&pJ-U&jTK`gbZ;IUn
%K=j'LlF#>!^!SN`:.D$f<,4VsLm?=YVu_tu]]$1.$ug/l\)4/M8.h'grSUU*=>lKmbnbs6XWYd`boK_9@/ha\\$b:=ZeEh"egB#R
%I1tTQUM=]G0[,:.g[+.c9s^V&7OHc#WO#amCmI+$Mc9Za2p7g&7;\>Tq[Ec/S%R<rQ9Ul#ci._-OTI'VC4@2IIW*`*'n%oY+?te1
%KE16"%JUYlnO10AEge=di'?<.g"oN\S!(&YN[*9bpl]In9i=Flb'`5s"T;U>'&C!&!lNRa?B7DU,+":7qQDe:"G%1;Df>G."9[9l
%B=.-K,e^nQM^Dcs1lIWDZ*Q,Ds"[6[bRuT/2);MVb:N0=9>&I]0=/U?/FbKT&a1e9nt*eCk?6PhGN6OkJHQ'(fE'<bc60eNL7e<1
%dW^$fpj6UTAqs)SUF,bRD_27c7/aKb2A,#GL1rkh+p]3drNqF>]0E4NVL4/_-5o?,Y8JS6dU1BMc4680B&a_uiMPHac;%f:%_MKV
%:18H]oJj1:s.QH]S\Xk^BH4eHHM]c@G'<`1m.@.#@T+TM<2aMBoB3T-p!2ocU&^DL]q3@WE+7JdEVA)Gm'FCI4u<>Rn$5&JH29FR
%r:Poh^/F4\4iBo4]c9k>I@8_1#_<&i&JkOtZHVJcSc0F8J<+[5pC%8'NAA7g=n(_gAJUtfKa<\#W5ZjuqU6htg59L[I?n$2fc\Ac
%oO-FH>enZPa,?P(_nj;HRL_ZR+C<*ls.L.B'U(#&#QNC,O"h@]R4ufobjlV"7[C$?)JPMXR-m(+&-C,I(fP<dB6fGM<TCDJ`[m2@
%7Ih9D<pj[Q2S2Y2Uc_jo%PUJNIsLA'k90:8&j%\Ocng!E;>ELbLl('8NCKT$4abVKKj9^l?X!D?Y11pL"N$$!r[akDG_#C3MHX*-
%FS+2!hC8^!Ta0MR=erc*HrK9C^akBXdg5LeNHO,HUtk+IU=u4[<&5ShcTe?TLu+Mi;_o,qff:qi5"`.kC*q<jduUK%iW3@(e2)_Z
%2Y/`<i88t8cLe]*Q&aN+@Vdc$5f_pZ,X("*Cs_WCr1*LC`I7ojj4?s3#)ZQ]4n/GgLRu_M#Pj>lqlLL-2"dCtHj)k!.rG(PN5O,C
%#FW>)DD2?AAm<!H@*;U_6@J;3?f*o(*FPY\(X->eh`$PN"$?"3'%sri1!ac5A'\VpJ&#X%BPnU1c(_aO1cHGrI*lU[J?(G`k%<#r
%/=N%sEtaZDnG)u!N911L2%/QD+di0)>tMAADALOB_R\!YQ<?3AY=CkUG7*L7+nLu9\LZ,[=$'RsH(Ok7/k40]\M"T?"XDRlNp".2
%RoTSS+[>?t,XBR34',m7Y/K[3$,>.3pT4BR'E?_d)7+rZrtXYgmi7GZ3=3"r":j"@]/PTVX]40d=]K'<.iH$-)hF0Eh;5>)OA))P
%pK9$`nGVEHYM0-<n^W#;$t?k&.7HN?CYGn?(SBrZr$GnDZ."&s5%jbp]n0BRH5cJ22[O@'^I,%udK95#53U>0.eqalVd3a2X9Ep+
%\7*.G4Z:UPOuNp-n6,MifP&h&G:Hcf&'BEOn0sYRRn8fUX4u)m^3J*Cf+$Rkp%%dfr9\4)"uI9LOgVr`Aj=XGTF:Qu";V%YUnfs-
%=26pQ!W-"J@?("7TA]C1mSh9D9&M,MK'_4[*!fRL8%(jSH#kc[@HK/S1Wf-X[g[bS^bs2IHk,<'^Y39m&**o-]k*(l4D1nenFGGm
%138=b:=4!%MIo'"^HRa2/]1rL.=.=\RX3lT]BrPrSj(%Cffb=`i4JC>$Xh'A5nlT_'BMH/o3!.=j26G>DE<_;=NQ=#qft.(?Yc$X
%RhCAqU\;FskeV\E9A@X*`lL^:.iLjYA+XM14ja']B#\h:)/ea,@M#"am<14?%\%XR(k`CJDAV1J4jIm(<2lmcD>\:[nLJ45B.k5%
%hf=%W%R#:,.)$rsI'6UjJ*Rc)^?'.Y^@V0+'2Q48MOrSh@%o+#jE-3`bHPo&c"*:%Y<hf9"8EVlC[+XG*o,QlZi0,=lADGCblp'[
%j==pNr(Pf635h[u9meULn%50NnbXDcqb.n(nn2M2^>-`k*.IN#cBu\$kGLm]!MZCC+VW>cUeSPLImdVW^k**>]Ha5t^XmbHZQ45<
%W"7b*Cf@MMkTDOQrK@.:8Z2Vb'@%T_R:6%a]QRT.3uOgbS!#d=ED`)0"^&M&BuPgU))VBWKDmE:j$A'r'N_0h.\1uZ2%g]m<+s9`
%?\co"^*]>s1M-9F\4lkNboo'b6'".#GI1D['')ao;onS!o4k/Z8UL3<;-tO;@:Aj+*7%dQA!Ztqa,d^B.?2=u_YL,1cF-jSSh68C
%Ba!mP$.>Q2V5^A7X6dP/$.n^GlKQ6'je3E:3)@c$=7rT@,-Uq?a%74WPH8Qq7N_WlnEX1a5YB]\l63Ran('hG>"bp]SPZIfL+uH7
%(p^:k[78'4=r,Hh4ZCX*3rJB3C-sVW7m_3B5_+N;355L%&`Z4qN#H-Ch?V#=+e#.ps/7X&k,3]Ypp,$:l1>>H5k$C^j'g./fttLc
%9WfcqZPB3[>*+;X:4Q%iR0ATB6[,6TYpnnGb2-@/<g#>bBSA"!N6Q\TMfftND>7t%SlVl+s0a&`WERn%q7>jYFaa0^%0"YqF_p!D
%!IYAt@eS+>OpSd(``F`WHYS?gCtHH$r.>=s^pb,Yq['V=*Ja&(W)3:c\9N`\_S9[34qbXBM"D&%Q7JNQ3>0ZbH=#q0L>o$foN$7S
%>`?](\)9c-$%`45FK^PK,9Mt9dVP3G7W/tJrgWp6Q9_hV7l,o=n0Tamo+e/P;&7gr'o.9!<^L.=?=5eCEa05'NhqMY\^o,4^Opgq
%60<0BJdDEJW1\N).i2JSrBkMbb2mQf;Vq^,\0q6A?L"<%=;RN0'b4<s*'7*N1NbiZfC)Yis+L)%D>Sa#HCqY-)4$gBgR5@<.GOUo
%`hL8r]Ehgs-clGU54'$H.9WCTd*)rj.HV-iju]NnqMj>6WL+&_Zeb*bZc.M>k<UoXjYk%IEC#m-$?;pcEh'q=0<?Eq4F@`DLuZi.
%RM?\]e^+`L$Sq^uF)pJJGo+rX%b'E-gO4>*'MZ/=-5&/!1Hg#cU%`lEKj;?Jjc#BlL;qle[#D7%.B%kP1.?7T"E@ST4+e<[]aioe
%p(5%rF8\%d;?)>7s2^Q+r'N%[/$MpMs$G&nGr+\J\u/TV0N8dT'FaZs7OHKAN;pm:^!SN`:;#$[oA-uj2Tc\O`'D&kZE:E02(.6o
%KDBDu1s?0X00\>q)pGmYMG(TQe!O%KLbe.n7[Bf`;*]s>JIsm`oBaWQ2AOs#QGelrbqPADc$@k"(RHZ/QP)C^UAG)Y/Q5gq+3[!u
%P]a8#X'%7uW2]eek+2fm8+g7#3b=WR9tf(MBg%iK`M[jV!m*P#l!$`1$=]E7aQ:g-('*\R>PqRIr(F_^>$Y6X)S8&;pp@?Vl9>0n
%3o/&;91&]</kk%Yif9o%s7tcSWbAcdbN:0:X:2<eV$4PVK'+DpFHPKs;h6J&6'G@X!NojslMAFD^%"W5d!q6.rqSs@?%?.,$:\e5
%D,CWc)*t4ul,8(d;V:aV>V.)Nl!SObB;seURE[0WJ%q7;2nBpuPE?:X72)1irsQ@d9RcEt^E1_q''4#mk7mF[(XV7!L/Ie2C7H%_
%i'5\u`YaYa)Wf'o9Yk5C+f@YHe,3b#C3kt#GMkbHTMpDGN02%<02((g$n"5ANCWMS9(89CZ&-ft>J3f=5.$Mq*/RJ=m"&ehUfVlQ
%N_u@[Ymq<,m7gO>6t#Cqm3P_/l?PG'#V^-p0oi-fe&pTTr<n7?s7'LZbBAmk&C1s8"!&dmRLZn((3#6/m80Y\*2p@=:+5#I]6Z+u
%KWVU+j@WG_*UDNbkY1=9oT&H#:,.LKoWHm2]2.5mglUjrgATm(>:=iAL5kRkCK:78<=e39G/%nO^bZrT\MqVRXj\eh>,N@WD]fHC
%Tk[*LM:O8``m$RY'/Er,>#,YD;,5k204D`E!me4Nkb`'En*=mrQ:#Mk%27AORf.t1i5Q=Fp!A=/D68GN$\TZAAH;a7%uO<+NO1'b
%&n@Gf:OoFE[iisTJWA9@l-`sK_qoY&O^Ng1(\`iUYk(3mSa1du6Ktf'du$W4kW*gI(0HE9RrnEOWO71gh1@SZY'Ena\m@l&pQ?)d
%\%^[+`<m>m=c*h<Rc,]QHk;4'?2tTTJJ1#"@musl,3K]6316THNY5/m"B:.MT<K[j-]6!8np+85R&dP,nVkdEhXu9%^u0:Mnj]U]
%GM\)].pG@\K*b&)$mY7o@iW:;Po5%lUq@'KV:@>J=A6<ZP6*n3@cq?m,aeVk)=m7;bIhnAY@/3S`gP]O2nD2TjDpV).eMJ4@'X\6
%$G@'0Pl%.ug)\)]Q5m`E[VeJ]T(Y%[KqTaiLY`lr/etCrMA2k_@C5Z'(GC8^8!;#5kR2]H?g@__6hbmSS*K"V_jpiFp;ee!%A^7W
%cm6OiMLeXV%M9R*:<,rceWjsJhe5!TFK'K2gqhMaMErB3e65!["LFhFLB%gRNuj,L>HQ46(#!9G3qCQI]-NYHRce*ED&r)tfE8h_
%KVUX,=3i[AIdU%;bN35pd;<;mnhi=_W,5$ZR1@,Vhr6uZd(slYp&fUCPmD3*iBnm2G#E&lD,?6@\+:F"cmk3@;="BQG1TXMdQ2^=
%Ba6k-WH>t:G7X@RUMb4dn&!<'5bRL\4N_LcmSjP=`3m!nH'$6EX]lmK"+KGD8.m?J%O(f(OOETcY$9gE0'hSUot[N`XD%KY%Bpf9
%Hm,lKdE2[!=^%kB].7A2'`4aP`0j6<\d9=HJ*s'+DEsapaKAlR]V,+G+TS+DZ#q]t=FW&`EQj&=UZ!'?6$=6$mssQcFEJ6]TeRT&
%.#-NP8?`--EAIh#SIpGY<.4**^1e?G84#S%)J$<p[#6W#Fcs5<#D#q>&'SLk<A?jok+`0\OrKYH8Yd1\PbQQ@C.LY'@CA,Qm:rsK
%0-WPj<\!Wg<sO2kC<IKI.rfLqC20;c(YrX+Q%R4tF>#iQ@=p$ej,SF921O/s9KW>ip1c3)0uH:cC3@k.Y&r"`e5/&o'PLV\@UOp7
%_mobk@TJH-G\-u2lGb^B9T0k.?gW*i2Yd%^k[o1s]TkP>37@7)XW@ER'X/@C&e-O#@qHMZA)FepFiMOE],P\Q<=PA$nPDXV1%RAV
%,"+I_CMH3nSe&-SM7^2,"KtcH_bi,T-*md%4j+-Me#ip:`'<abe*b/VjdiYmdHrf-Y]dW@QA2?ST;I$7hul#H;K:2Sp)m7QK?9g=
%#!h!BWR[Q\"W_&&cQlVg0b$s&NmSon$4Xjn*S+2deH8YtNZB%t!Jdi93fIQG"PWMG3Lo+M7f2Hi[HVr\"/)2M)A^`8D!coG(go2$
%!"9cXK?0aFi>*VQ^66npi&d/j`F#<<#:-Q16CjehrN2.=MftlVL:Pf)[=aOE,.5l*2:=2ah3$ZBB`^ql)spD>oPETm.C\4@C6,gk
%'.1Tf/%V$D[:)LQ3(po(X+tBHDB([h/[,5=R/qH4G?V]pfN8WiDK&&o1IFY4$t(nX8H"iVTI3!K#aI3.+i[\/9?UC"Y)+t488AC-
%Tl?"Pob!.BTRgQ8UZ\*2!:C5O<WMXG=?^mGL@c::3<Cg@d8"kG1Rhba#'bkC55tnsVL_8)LAAQ3X[Bc@E3=?MAtD[m3?BR?`k*fD
%T\mR&bm:^KW^1Qs8CC3nNmLr(C^ElXO'r^F+qld?i%9qd4GN77qiM!NdNnjn)b7_'EYa(8GLA`<'79o#HY'm+<*L$,/=9Cu^37cf
%r&kMu;&j55a(*Sk&O+oV">o=k6&1Y9"U(na:+)b:ffF,Y1)tD57ep:Qhe\7_,ZWA#hZ5%(E3@?)cpg9hm?0I9U)P41n[Y[;>/F+$
%I]G<)[rQtgIC#BI;b11i%3=bGUYd?&)5@lYoJ+2?5sRmVpQ;u\FbW+%<ub<t,%mFkNjN\"Z*OSde=/!]#Tq8f%Tt/.KM\*k7&7:k
%_hm$268G$qp_6-`Ac+g0@Q5?&pZ;=(q@pZsfjRhF\UA`ZUFgYteO&ABreTAm$&:TD<-X8S5>,hR&j=ph*8gcJj_jq&bgP?FqsV<"
%%Yl:TWGm*)GqL(C3LGG2-2o<`qqM!52dn&\3R-"AAYFa*Sh&ef[/jVM:Z9Wi[&58C4_mGY2$C]B/g"CEn7?k_s%GYDZ3TUV-N:!M
%dcN1YRBqFiDbD&5B*nT;Uf4]2?WQ;cj'.D*J#U5ma>Wm?%c-J'a-AOWZ&54:cLr%>-S0XL4$g?RP=G:o*W<oDj\t]U=;S]iBRD\$
%e2sktk6:]"90_mXY+REdr/l8iW>.MiVhL*=@h\X7#EVMX*k)(aDM<6c>s,%I10^`l&nd8K='9Z/Q<2@=]8N)a]#qg9Y<8V=$QF;h
%b4>O@lEJSui`X1ja[5Td!`<Mm>[pZ7p6\E'ghfm6Qh8tgIkS2G3XJ)30WN!8m,jU*LL]UqXgo*fBEGZ<Ik[Q.#qmbd$!6H%<[Da.
%T`_VW5DSA^qLgBHm8/94W%K/U6@I[/JEJg%M/lC2-%"b`=N!n.SecJqpAQ=4n#87TB?FA&G=bN4cZ=>!/+Moj@l1SlhbGhmf;j8`
%^$r,S2p,omf,I('36H"pL\M=d9M@`tWW&nSc"]JLQ-&.kiNREl1q*-;U?U\_3q9dc&u4]db_a+foLj]6]j<o_$qGMf*RUITf"m)=
%=A-#a7^\2H$P8g%47SQlh%eDJQ&M0a3-hL,+',,+fY!t4#0(_sRI0G*dR@oQY8lEC=+Hkq;)K\mhPIO>lnUDq2A-I"D=EHP;-`Qj
%=J\s=da>Z(J-9HOoDn_O16k0j>`5UrVR!,HSQI_2>V7L(/3]E#`9u<CH@3@]86D@UIq**i4$4UYA)V^[:>rbSr_#5@]&J6c43;Gd
%pRm:23bK*WZMH6kNgs@hL0$=p<QseFFTKFHhN\?<CHf(69%;b8<NHd,F<acl?&BdP%kiY"Q6%s$o4t=hn,a7TL)3:?ihc#^O/-0/
%KA$^:lo+:KO`\DJY9%T$_pQpn28",.GSuOtVdI=2@Or-uY8Z/(WgQ'\dp5f]Zh(ka0\a>R_Yhj56!.6YIgh8-;^X+BNnLY,iV(/.
%(ZEF(AdKP%'Ad','#Qdm#J'?lj`WMOB[P53]!7\2-h$2i_WdoB69(0Y9n`6Wg\9ZCY!!jjN:iJ*Ogb$!51tob_YGK$)a5i'7_"OC
%k/%qaogSY]s"YD)2V6C9gSaEWlK8*B64?)M2X\K/kPSMnG^3<qQ`o-OiC\CY-sSR9?F[^;m>%/M2m6XG(Z,V8QEFQ3]esDO/tCJg
%F7X8AG]$*D?^b2u?!kfEPIo=LXLn6i7icB7F"DapKPorIQ]6VXl"#'NDKDRq5I[u#D9X@f2m7;Eg0%i:o6A@$AKS4;\YK'#gg%"0
%bfu\9:0VcU^!$#X)[[Lp<uQ.$:PJ;e>d4T@=#RD/S8eQ=2!<U(F7$W)7G[U%080/36>'_UM;,/W7uZHXI&nIWcdV6?1s[h[d<V^j
%Fm$6*2_4KVZ^9GBeB(!oI_S-Zk)Z\1g[k7<;f;U4ANMf"1ETbkIurE+o3,Jdbj3eGF8gkRI"?1t>A)(3I!8/]0$NF#.gsO9am)4b
%ENcf9D'$DBnDT;fJpdUj]!-8.%PK)+o^]j_X2Gd6UK@B1fiiTHi@;RH[rB*2R:"<!k3j'8a+q'VqK'-\d-g;?(W2a@D<PSOl2'IS
%1"p!K?_gK)etUMiU5N5'908%]<@KKeeP9n<a+rE3`I\q&/DeVDXqr0!p".1RM]jXc4?_jDgQbZX.9tH6V<*%!F=FrRCbKefgud$S
%T"\E$(s32-Za;)b*\JI?f3:o295E9T\#4Sl-&j[iV5hhu/[\JXnYL[cEj`R0]o"D^o_%N]md_O8]Qq)6^T8KFgi>;S-njcPGBT=V
%N0X,-A&!3">S1kJbKZgKdrMX`fL=M5H"T4O'!KC..tT<gXDGXB]p3\Oo6TL8FQCSiX0AsOJ$5,<ap7=/Q%hm;.m<QE0!_SDV9!s<
%RZE7p7lujha)4#FpR:A:o'q#dEda%^MEIBe_hbR=Nk1([2C*`o1%cGjNA',4Y6kf>f@A]*Y.hKn0'K@69;].DA*T,U`J/QN=uRMj
%<dWuX>r31n5"$:1I#;h0cP<4SB;uS-=\CWH=3&p`W&E75N4p9)nRuk/9S@<7<hAI(2("MM=keh%GAHG\``UEL](9\r%s`?#oZX2a
%R`5,'Cp%neO2VlYU+pX4VSn^_f;mP4ULM4qq0P$nI"-8YX2iP$Z$uA3MFZ4/j1)<mCr@!p2X2W<Ge%i0^HC4RLhhb^qshZlX0Fj4
%^i$9pcH_=5;L+j@:\ON)f5hloG5_-oi,KdiO^EU_58L5`'kN;40BVTM0!AibK3j"u\u_d3W8]8L;_@4#?HfPl5rUWK&m;-A$]u?u
%eYm!S_A!m!81.-C[@b3E(1.N)@CDMtb`8*/0Sdcj)s2H(^;lK2K#kSGbqHDc<2%8<>i_;Io$8+g?;qHf#C.K/^)U-!DXJuE5r[SF
%0,`l[\&9T\i$LM*?*>mQ3;mH_bB;Kl/g%4!p3?C*SE'@,a[Q2<4W!'MYq!`-Y-!SulDhEG8G)MfOAXU;_YI?n8LQJt)T&P&ZQu^1
%F+Pf1ar+aKp)XaJ`QK:!/s\T]Wn8mJ@rn0PP.()YgX9M.jeUY%bnJ2Y9YAI<\HF-5qI*]2QS.%`BtC`!5O/\"q9mjJ`i=$"]!7Bc
%$\S<0h:oHeC[DSkHohMfCb?\cbY9_#Qe>'/QFiXLWJ@7no$tSIAl#2)[]#I:IOgP.0t-Y\;Kb]smNYr>Q.tKhf^;ISHY9`+ffmeu
%V<t2(Ku<<O!RL28m2^@n[St/#SWgtAm*=)I0k,^)[aAF8NQ%(Rh49bT_euW*Pi("HCT6,b>E]`d\\7Zh,-oCK_TH=I;/Xt>9).qM
%Y-?WNTqojj<TU6,<Dd(g[@4\><I[m-dsb4YCf;AI;;I^CgRV4V\k0n;<nX:c*:5!Z^"u&\;V\lX/R8%n.5?%p9c`<Sn^PHV9hDab
%Nsk4FV&^e_8un*H`I1i[)lq5Qbjs:W2m^&$P;=S4r?>1aot#M/NQCf7+-Rc?ZB5gMc/-?Il$2YS)X6TenmQQ'Q1*5sYA<BnrT7ji
%RU&!>grV%.a@l6dY*@/EaEsJ18=qn&f[8lW#DMd'_a3Zfh`4r`h/s7;D]^VC+\7b^GoFAk'rc7q[/Iq9LFeJnbKB*ImIK],3'rBR
%O*;!iH$k'L0ZPj3B)!W$<bj(?OM3feioa*4RToNc>l6RfR7f\@9^Zf$^Qs4@f9c)&9q0IAGOPG)VqtqP2#L27T1TuBmPH;p/4):n
%Q)G6S>?T9NB=mMgG]kO<n")C4/e/6SqU.f@DuHb>Gg&V1kM`uKkdbfL]60_&=NR+8H^3U0C?]d<6G5J9\@=+9:+nZkS+TGRELX[)
%Y3d39<gM/e<tVjU5rVk;[;p80.kT%PFXfK;CLR8%jZ42`ft=K=O%VFZk6:B&ol*d@H+7@[gTY9hDDu<#]=6s=)s1un*BC^+/)Aaf
%6ali9=+2^ggdeeGiVV]1EI31BD!sK>+6#r?c,8\c7e,HsZuGYFSi=SX:(ub3F5blrUEQdH4N/s+dSJO2>'qf*f:pS'0&(kN[cmSZ
%j'Aja/S'e6g2>p@9"RgY$X,ca5:pcEjn$I7nn#Pf=Y651Um'X]FAjZ2l+<+(R+9?r>4n_>>,"(>k2fl:k7/nHcYq^@H6]tG<ak`0
%99n;_Fh^hX,hOTiYh<coYk1nsGKk)d4`,&eo'=QD>,0s=(u0OMdl>%n\2.;98'!E5&b;db9Ar(gHtcZggN@e@;6F9''X?MCBkr^1
%oVp?Ml-js"m^fsX9PbH4bss+%crsb<QWr]cqS#s5Vmai-1#=\sp=Ut&<nuAC1K88+SM*)g\'8U]!4mH@Sp0t]X/n52$+"WbPDDG.
%G+MaR]l%Ac,6-P\(EPBhIY,5?j;CSK?)L`OOlj=D8Aehl*H*%Q7XuE%V_V&%T%5AYkWLOCK49*/lY`X?P:lo<%`(2AgLCj$c4J8_
%>.Zp(&e>!2'N2X;d1HJrY_/FW`kbi7)6Io%h[XHllh7LRih`@KFRh$H28-&G[#Q3meb"ro$4D"L*dRt#)u<^d>G84n"(biH<[c^9
%oHX,p]Z=`/6C=?J(L=D.VM'ER?'t0/72IlkJ%O9[^4q-*rD:*,\!jF\?8g.F4:J:<.QU,=BNb)gY3f!96I<!l5R[&loh<k38Il\%
%\0[r))Obg+0=1ruB[e_.ekY'S3Z\q=S8G*AC=?tBlIkS9po"^u2CmX7N,GTOWh\#ciZh?!%Tbp=V2isk9ut?N89dV,RZ->Q/(:P@
%`hdPnkVKnuN3^NULS7JuUu;D?+.MS>5kA/Zc[%+Tj$:pP7["h^YZ5+P.Y+JsNOE?Td@55U5X+K_`'^<]DY>*^FR.^_kSHN+11mS2
%L02Mg!qO3]Y0MT4r-Nc\WY#dUS8UM;=5q7mZB[C4-[',-R/jTu:[@9.[=5I7dYnC8HY4lZ8T/m*R'mS/S@$si1n.UJP)0&!^.2Et
%c5Tfa8\D?i`g/PLb^XmtNFlM_%=ae+f`X>3Bm/cpBc&MXp0f8^LfL[9aoE-F2R%3[%P-NK+%G;fZ(>/ba#B,r>GIKX#Nb?1>he1k
%mWrhi3At*=-Uq7GJ>X++*tp@"N8SXej@:Vf?r(aSA)1NXK]'H7":7AaET1B4gb=!j^0,!Vp)1<XF4dSq\(SKR26petbsoZk2ZUKd
%<.\=(s%M*md2i2-$sT8C5$;fKN17VSV&BbD+$la.)T^VXW0B>T;<o6:^\#h(*KD?laYSn9&KQsh2jadm/D>C,lIjI*5TO?%B3Q[$
%Ws0;5!+$ZEYeUPDT<PAF]ICfU1giu67gjIf7a_mGcHi^>[Sd6XA8GMs*n-/#N^7r(LiOc2kKl`mGmrTb2K&$Q_VPkd@[Lj[*(Xg]
%lTm!fT+EuAP6W1N&)EHBNe\b(6VXP=AM]M;A.8g[huaqLadm]j`smF:/cTk'\YZq%f%'KbVKTXr^b4_XC8/&dXDLp@iIagKD.P_A
%B^tMBE3Z#Nju3nhHTT:'m`*ZQno:DQ08Z)RF"An0*'R.qh:,)t\je7s2BUt[M641/2pjd!etJSOk#&YK5TTLHlMg$F@Z/\C8Rm+F
%P`!MJX)Ihq.c3LH@Oe^o+l;Y[;D/P1G8jabRc[IKaVK31k`.@Sc_S()/+oaDHj/?%.b$b(BPS!M>S/Vbn*ZJ4AGgIiY9_oC6Xm*f
%Gt;anj3;7PD6]^9fdg-s)a%JqB4-<jjl&g"X*N;9't)Ucf#1eH2^?XAW=jXORb6>"^9SZ/6$JNReOL:e/\Rkn_6=iA?5AblCqaHi
%i`[l,Tc<f=-!Ep-psYL=NI0C7;ARr^W-YcCN0XMu1.f0o\oW-N?e[,sZo\%q7+7ErRaj8iX_VCd=Er[V*Y6D.@rZ]Qeqr8XQ(u4E
%.mbAAfK?++-"LHUnfa^69$>KCp@7:VfY$*"I*7Zl[+f+?FjRgTR1kp0nVX0c)b+jR"!Z47gFKNd?#>DnVM2q4d:+;fh3u)NYK8n1
%9h]-eK_ZWCBg,"q0$AGX9QC%4\%C*m"I+(_eTjQK45idkD5!r_;<nf;Ai&X^q1taek)WI,g=B.K*51a4D?P(?&\!?XTGsmjQf[^t
%kY>a5rjHs75.'73C[#K42<KY8!XE(2d@Hj#)O&mWDVGV+D/X9W?VVXs2;Jj3HT@@8\cF5P^`C:E2["G<q[>dT*3S>>C?c+$2d/B,
%KNmE3Un">hU8c<3iG2WGQ5<MoG]>4r(U#KV>Z/hE.L"iinbTIe717)ic2!P\TsmAa2Z6$603.FDa^n@'=&2EJ79JHK1`*3\A7_$\
%3S\lq`Nul7FXRu2RtjW(B_='CMNeXRfl?0.&cooP]ls<1\pLEi=t&bDP*X`_n'*<E#JL+@j9?rtQjJNbf:B.p;un6mQUK$'l.bc<
%Q$M6?9i7>U"H3(`lZk"E!ZkKMMlNZP3(P_&jH@H(LgdR7DQV[6o7X=kVs<2R:O,!o1#He9gRHNWQ-*N?Tsi6bRE38*Q8K<TN!TA<
%=jO0#[3Ne^E)ob)O5_%<?U50>9WW%;kqZ_t"@uU8$':X;,ce=p=55?4S13GLF#?LDr-m\SfD+--3jr(RLQP$.l\A'q7QE[c7mYhp
%a=6fGVESh/(mKR*]+HP94DBOZp:0.lm*j-j,5K5j-H4jtd@Is`FT.qg)W4VqAC;o5</"HB''l,K]mmSIHVLV,[o_+H?Fd$n>*l+,
%?FsNo2@cL""7>`LH,=*X@cEr!<iI[gD%B:>&3[&HW\]5bZNr6kZY$2To]>b[UX>cj_hW:kPGiA+,CTT^.WVpIj^PLEotr@1BBOIJ
%l(o!H_V38@$`G!T^c\9ueG;elaDC7k.tjq;4^6IXB`ZsTW,A%Rp<tPHY?.=W)7YP@HDMui@=W[_%=n'jh9:$mTYF.k]Lqo;G=pii
%+DG2JQ06*:IPMBUc^1:8Ng<Z@[f<-;qWFAm'a#\O"uXXnVmN^>Oc1"(op`)>>d>Z5LY=k5d(;qILF^V+r$e\r+^J-MD[/5U146^j
%JN>AKf$RJ4hgr?^5rJPb_j+ub\ap!=7HD+(PC:'lK@Q(6=uuh*]4^X#-"VY[^hp\&GCTsVC^>769F\Er%,\bYTO(CH_m.477Yb3!
%6/ZW39Q?80=:qrKe_.'5]Pognp;'mP#<g`*d?ZpWd%5s9h(E^E5qf\N:`$b5k>!15'DK94QuFBml]db>CJ&N3:RkH,'lS+i2h#KN
%Vseth0gH&K)^`5\bSL]<L;2J_VTLhB(7b-J@N*HSW9^pF(kkZqZ="ZRDbcMi<SpTj)jiN.fOG>.gkLk\]KCXg4(%aamUk+!=m4ke
%E+Xd=)?CA>=3Mcif(L)0P;\4VggkWm[c&;<+fuNsG<<NF;0u?If/o;RGU2mEes\ePU]h9m0hc+oa[ET]3?VH>p[r"E"p)A\\gK6B
%T(Qk,3J,^bl?bHmnlSV8L`%pMCkSo^__R3tNsIc/)b(,W@c<4<,`t:LWcEQ6fZGJ*olGok.L^#UA>KI\Z[.j]5/,^kKNI3TXAO:`
%6ZP;>fE1h(WI!Q=rh>i<*hO)0;Z1a[Z>G8U_>!Mq_]@/AM-f.[#=WG-L^+GJ<K0Fj/Y=_hNSJkMcPMX>o81ZP'ffF_TA?@S%pr<L
%-1si2c<@2PU@?eareYhb2JIY";&ibUS5>3CXk7^7*5&jH(V,/`os1,@XduYr_AX(46;(K6<`Aj0HJ`eSYQK$pQbBr7]sE&77mqQs
%B*%NQ$@q5-`iN9[gRADM3OgYQXrj:l.qi>3JHB2M^\oOr97Y(e4&Gr2GR4ql3:<H_W%isq'j1>WjN"hJ_+9Q1BA]T(`F@YHS$!9$
%m,<7hjYc_u!Y68h3t^*DIHjWDQD'();*@Y/XfA:W%mB8/;[7ZV3+T&1:^(q?Nc5h2AR@jMRlM1-TZON3TX=F3bJqr?P.N[V[KeOp
%Ggm\SW0kJkdN(VUFld",D$\ZR*#h.%??ks_W-U)(='sHCc;(iFqP+2Nep;]1\Y:WF2n9TO]14)TR&sq(g$C/A7Nr2K='t4?fkugA
%>_HZMS3:60@D;$^K]E,S>G"^Bm_]ttihn/Z"WlZRE#`Qm[=0*L5UBdr>X@%.EPnPTB=>_7"deDONH2?k+]9?U,&'?fCo-U\DC]2Y
%nR6Q(PA^&UGVY1t;mQ16D.3B<&kb_"l=iGEB-K:Z'76\VRmlH2Ui;/WEp(<i$YrPE\O;;IIPFV=[H!7[DGKX/FR=nI5k"_rf?fN#
%R@-I@;nLsGNj!VG&"D):jtd>EP>jtGAr4NKD094IqC4q;?$*tJ3nukJo&aB)]l;91`XTnEf$\>jcJ66bAi6m6Ja0gu!,/Li!crLM
%aZN#/22!KLfIB(n&m)!YV2\Zc@":,!?SK)*])#.$@m?8?kc?u&SG&7e_W`'Ke<OQOCVdrV&X4SX&ol3/OsIA?SoVI\'-feP%+1eP
%8K(l%_!-X,*B4eufAo2\!O;_o];K'kk)L:boNq*mJO)2-.=?`S5ia9L;\!a0Z:2t(_io,@gm$D1(0m8[E.4-G-26RSitO;e4)lcZ
%?tJ)q[eUC2GtGKCC-TJ92WA@+1g4R$?NdsFqE2<M*n!iFMg$lQC,ka`5-DCBXQFOFk[7h-&LKlj+raKU(Y<R7^Lr2lpDjb6D%h@t
%71PQ,FkeVEmC<BMDR!n=rKo*!J]G'QFAF3G/k)adKj0[85o!]tQ@E<:cd!oHFt].Zfqrbens@sJj`E@e<R/mbBJ]&4inf<df'.41
%FC6X%Zb;sQhAr^B&*+.OJ?I`Y$lcp&^9g_X4O#P8Uae'0C-u0,9-(*%<j9d-B`[R,<#=l9)=lQpAYDp>dOPQ7orOXCXpPolhB@3Q
%T@Cp"j[-06G'sL(Y(hYe;$I2X.XrM#q5u<)WU/HtQJI:2EcGF[pn^mA0U>Lq_:Mmi19$cAeR?Ppi-;WPFn<G^],q9#\LO282KJsC
%S,-WjNq7---e1p9]k6-LTI+qf.I`a\]k22*)8X"rb2s-dc$."4*7lb9AllM!9:dC^G6\u'?Mir>n%bcK4Te;(?4"*gDMj=h$t#^;
%K&H<c+`rNmTH4HWG33ps/(HW=4U9XejPtVI<@L&"8RlXh#QEk+8o#ei%V$bX)oR(`Zdb;%/*jR*gIND52Us_MQJ5p(>"NgFEZ]#Z
%KH`UE:Jqr'Gs-SVpQc#\<.='_T7\fdGb^Y6ga\aL5KgQC'`NCH%3L>4RjD0JB3Sc!EJ[q%dcZK9T4*6?.9/Cq+sUr=%=>bbo9lEF
%:sC7!e[,4.D*"`=lZHbuLpHl?\3/)PRB9GL(_5ckq74G`Q!R0UmEQA?AIdrObsYSe]muI?[@k$5rh$rjXhD_o1V+h!m3?uLHFnI_
%;Mt^\RI6d`s!dHYb>R?*Eo&/^h[p@pWVBUVL*&#m4EpRA0$Im18UK^AQ.oAo5t_f)'C;ER"NuetRf<*K9Xi<01U<Y=VtM4Eh:,U_
%PMV0J/7&<HhRol5g^a@MBhmj,SCMP_"1:_(JC<Hn_1t*Z:K>\%&._[(-6\9"m_eYQ@O?Jikfc9b;AHMO+2YKBf[4F:/Il'!P*K>(
%'-em=5otZ7d^PP.Q!(VG0dqd[f2?rWM`UVRZ=%6]9:*+n\)#<Q9"',$!ml:i/Zr%KeftMIqGAn8FI.j:eWks/G;cY?=k\4"EjWtU
%1qm0iD!eUm8YL7=,PY;G-RP#AY2'FH(L1/&@u$sQA^EfU_,,BTNu@)-W0*Ol*4=3@^'.f_ifPDU[B,1<isa;n-Eie/AS"7g0`-XR
%W&@\lWM6C3a&*UglhOF<ON@:.hknXH!H@Z(<"HqC]VSHKDWVX8l^:A3DE<.pZ/:"QJCdKUkQr"`mG0$+Gkoa,3MP75[g0hSJJic1
%)e*7W7iM)QW.7nq`77%L*G6=rb#ZR%Q-<5Jmmee6d:b`T`;'P6&Z34./lGosUjm;A.9ICNL8L_'NHqn`6Rc[1;(o>CHS%;h<5%`1
%gLkGD2bWD`SF?N@::QKZ95"-S*m![Hfb"^l2_3.L-&Ctr"OBLTiY<Gcr_CKg_,3.$*0&4DF>UHHKfOO>NJ#tG#'i=9J?C]u@9l5Z
%DXUY`X[XX(3p;3u'h/QRP3(<V8QpS_"t$q1]p1`LM,Yk>C4#&!Ee>R'PBCAaA'=Rg*N71\@pK(g.5V[sFZ$9lHef`H8<7=_%Utbr
%qP)[!e2N\^JG!&um!@j&M;:h+Tm'/@?Zl&WWS"?d(':PogJ_r2S3W:lXRu22THZ9q;sV@BmM[nD*0fQ0V<%b<j+U/R;$CPboZt^E
%fiZ%P0qJ[c,od!t>qt95C`PTu-Ejk*h-_9uQhkc!emlST.LH8O#55$mX'E>C(+q6]/gYKr\Y#tZQ01sL2OE&WAKOj+LKeif](=is
%aA9um9BjCW_Zb:\ib=Wdem;"BoPa&'L+@-&XMJ9><3g\<kXM`<;MPK.E<!T)*i<569`XunnbfBD6>='KHu_;Kjb:7I[Jmi_m(BKu
%+\Z'fc"pr`2H.2ub#MB#HEqZsf8_l^9@<-[31%LO&RZjp8[2)M[udZI??hES):=Fa\TGR%BWHEd&Ym\HY&CLJ5b"A1jo6lnPK.,s
%oDHt=iFf`An.]Z?STC/8,f(r-)E7Q0mIf*H;#aunBbd[S=3p]2Ht8\u.MDV:I-k6l?i/K23P8Jt'mJC+Y1fChV4:nKkMGjQou,#c
%+Q'j&V)cps5@8udC/\Dlg,`p]M,ZTElLNMOC=QE>D6;V6Wf"0L7I;ZE#TG>&Y+IOcp)O4fY$W)p/@D;7%enA^C\7nV"QLHMkoA=_
%rGGQG1=7>aWV,o,@O<[r7f)YdFof0%Fu':#=h)Q/^"CKi.!%VYnP#afBr4NiKNF3Z&OUAG:STmW+&$1:JhM)5=U)$8\4t"]UoMRC
%Yq^h6N5r?+Eh;R!$Eo6=mP[J[.hI,GdJaX3<`[V3ad^8/qKD/?\="_sc#!`As'UJJUY9*OPI3e=QHD+K<s*=?`LPf2B3#LB$.1)L
%]4M[Si6.c$Y)Y24N68&Vk@rdOPJ42<OYa7L`gL]lR;sh<oF$\T=fUi7cYTDbkEe'&[2[D(SlZsM,S^!PK5cP8#3[oCoXL=6m@O\(
%f,$lk7aK`$,;>Xi2\%7#+@c?;"F@R*oDHJFr'R,_9>(0:9cll:OM9osaO5>m?/!teVCn1g$h?a_DF(F3Th$*A[Z>J*nOM]R<pHAU
%qO^)90T2VEIa4f`5(Mc:'Kil7YL)j#AeRW%./8@jLn1CnhG[/"Q9TJ3QtaB*I'4sf2_eh^0%qa8E"$YhCUo3>IcM2EUK)5SHh!9P
%GFoUkcEG?ul65eC9Ch!ZihYmlp-V(42gRs*Tdt&BicU<-k)$#1N5+uhb\0Eeef[>>Klfmaf7+O:(CoZmphlqaf!Wf-1StbdY%gEn
%5;ppLB2;gHMAkqYJno/8g1[-G8L#:]\_ad!:oo/LJ"hG?(6YR'oLBCn6pfL,(_WgDVpGd?lKQR%[F9>\GdY?ASl-TrVsd_^n%B)\
%dlWR/4g'P5oV3YQL:j=5(@[a,$@7_%nK.nqIff_'8tlOnP4etZB>+TRr62<Sa.DZ\nELJ4oXOX4OMf%SkNk@gkM@7uH4X]4=PpnT
%m1fgaRhN,]%d4rh8J<-REI%nJSp^\3Gl7J)r^#!8A9`0_1[uTH!u'UCE+3n"F'!l*_Dd7K)<02n"7Nm.6uU==C?n[Tc+E`_$0t%/
%jQhRi3CGZ$#f"8<`1u%]ih(_%?tf1!kG&enGqcm>mjl#kVEb;gcqaXYkqqZ3^b=Ja[a7:3cmt.H/$Y6#dNPGMk2k@6hjQ,p+n#S:
%9a'k^4Mj<sf)(<?hc,[r<(8&nYsMnJp\6Sif[p15os@c-Tl4`mFnE&r[DOr[He&DZY5H>a%<'GV!:uf`TCof8)lsK#dIR(XDr0"q
%j2bc>o`MQTq7bFRpS!?BhfIBe3[,4i=SGYp:QQ%dB3PR$>48i%T`a.u+7+Z+/%#KKqa1l'*'6sgTM?AX7dmS[Blr7&8N?dKTRT-^
%kNmulU-CVoDr.<GG'9epp@9r.-s'DXW$CdW$T/B!ab/?rFO)Q22)3H7ERR*"j+cDNn\+b@#NOERIHNi;dVWu$i+QF*;/o?o"dX>h
%h9Js)6ubCra4Rt`VV&C0:^ea$R?'-T/KpZSo2$rhIe%69lJeX"`Q9l49+,j3jXD6N8TC>5322;(R(,DdE[V7gHF5RKB*>h8U6^_\
%/;nCYi\X;dW(Mke$mS"P)eT0t<$fOeM5.0gENSHU>3Zi?B*?&NPSfh-j.QV'L6Eku)W^"ilo)qC*.o15oE7e+pWCi=&(Z;e+g</j
%@]6fP!\W?Z\5c+@)VnR6N%@>GP!i9l6CaAf`Z?p`a;TD3TK04(RDL2Cd[b-^I?,FfadL'ok$jR?=^g>IE/i'SI&X,<$*=#lkrV/f
%juUBJ*R6c<i=09=<<$qB6EeKL`^9\$pG*>0q:6*86M2F4,R`"\Z4]1",Vqa)nPOI]>DFpI;>kBu>'q7QUqN7mB_;9TZPDI;QF0hq
%n!>Gi>+V)ZMTN!n.42Ni?j`3W9>&(;Wdmk^Bg=>.9O+C/5POIiOc-Oi,EaT(no77:]^)kf-if;.j8&A2<@dq=Osn0`8Kc[mW`Y"<
%D0D)E)N&-P67lV*#s&7p[<W'Y8Q;2m=dnCtVol3/S6DOgE[j6GJ0BgpL^R'i:Q&"#fb8VkX0^uW?rMgtDe]$>BI/g_8?G;N%]P`M
%brn8P6h$/Ork0<4;b@0'O\4lO>ib1G&+Pd#;@-)BFj`?sM:>*<2u.4Ga\TZY,rlW3$[`q9W+]ljB3K!M80nA[]kO;H?nE8L%aQ=[
%<Cf54)B-Q6c`'@5!hr+TONG+CJp>,CRu<1[9EnW'NZTLOTb=reXbAJ84HBK5emJb7O"?FFX&G;U\U7/ShrSotpFNc-LK?nSL8\\C
%/0;2L!f4`?M3J!nR`'d%o]]2a<qbcS2#e!:?%VrN(!F^@kUhpGVlCWS&YuA=T-rRbTj.Wk+6O#Ro7o?DkKaaQiUc6hboNU;HoHP:
%)Ns.m6:8JV8,bmK+UOg.ASFDX83dZI&kQ,dAC.;2:U5jVjg4Am/SX%s9$b\EGgONp9\.R`O[TaW`2a$Q+b4e&[=h3jbB'I4kZ%@X
%LK!M?*U`;9`U,:6)Iat&/Wa+',kEu_!dY5.:4b>'06#=X!S)a9=hisHR0S'iP=u!W/9^L>OQSi**!@qi'Z[hr_&&+Dr'8oupMpBS
%+M<mcHqK%L$D5ak044Kr`k+7KV_hZ8+B?F.\`<FaN00&XaA-mk-r'k]6+J1(9]fF`I/sQ[HqKV*P(45p-1p=-apEWa!]<M<I7Q4]
%-%sSH3?YO;4@KpK^p0ER#t,3der]F6=%NP`7&:p7,EjB=*:!draGS?o5hqAM=XN2;g;UQ-5qs7_9@,(s[H9mD0I],/T`3.G0U5=O
%A@0X6[:IA"gmnm0<d3_d%+I_="AP*-]?%uPR[/a`SZ)(qFK^i5dbRN>HJS:#'"fOJ,h3W^Bu$>OkcUW'K#D=.]0Q$Z).rDQ.*MCc
%ho@Q-oO2RBq"/"7_<?<+Fbk>8B6c\b5&fgA"sU))b<k7]gUfJe;/e?f$aQhCLe/_p4Pk`'8KNYLge*V>S5>?HEFX*oNX4!g8io*.
%GfU3:4WYeVF,ts0^tdrl-S3=9_t]sHbWc3/*R$Vs)3JFk@EF&TSI6V_pL]Bj`]_=].Qr6"6?/a>$cTeO0+]Mrm("G;d[pKJ[/3YK
%c9PEC(p=KckFLBpWY]#/kJJ9,C)pY:kG);B.%Ln<%69?\1sUl%LK$<F)X#$9o,m09B2X.l*+qmWLu"Is0AL_&*"fA1n<K=FJoqj@
%UdQ6HK+i1ZC'X#lN>E:UPtpi8[c@SD?@QMV`Z5qb]5]F+;s@FkVg5J#(^3cNa5nqS4(5\Cl"!c]ni7SN]3Ob.j=ZdGnb=4mI]"5)
%7X[V!hFmmfVkG*7q".E)J3-!:"f)[kcdR9+'*u#?:0o'MSj,O4;1A9no`CPREV[H\aBcN!j)K:oM/_6kW/+R2o=LMbcSonhEMCI2
%I(`-65k\B%JnV>T1,\)%NQfVVm,1ih<48:j.YpA%Q$2N]nU_F#Hd"`ChB"2W@CO8]:=/C5JK&Y@dc3Ph$iYh'8'+P]8\S`ZLKT0"
%j57l[UgEPg@Qqj=Ufr!j/!,(.aME7g*IbIu#b6NmB<l-Ws3CR(cJCr$:BHta:5[L?L&"[N3`6rd;P!nh/'t^006.\$5b^k'cH.7d
%:s$Wn)CNnI4G\/O6cXITnCRX=d_;kqQefaNIUN/m^+k:lg$&=nEj@KP^k(PjF)B.CM%dt8K0>E[Iikdm<GHY@]hbqLN%s2TmHUSq
%Q)[HQP#e&ZF3%/9Nt7DB`kVBuBk:XT?Hm]5ck8S<"RR"l4/dFP#<RETWQ%Kr2o+9[<UgAArXN%3:QLZ=>k=KS@/LpiI>Ydkg;ooC
%>5lo*[7pO\0dRICJ[MW:?:YGkOd&<9dQ',+>]Q[h6*1)jWaN4d4,#XX%XfgXBQt]"f\"N\Hp2BC;SHJLG#;RL[uf.?/BF7dlW*K@
%q>f'A>VgkKJL,IYKt0YR#%FUfReQ+QTi\cH#isRj+f9NKL/_k`,UMN(1:1#C;MGI[BEN#QJut@S`0@HFrI?d3Rp-8'+bd9`k<Oq]
%TM6W>H?*WO^'-,>e?lt7lqKsiCCfQ.jXY@N,aFPc.rn;j`g#TVO^K@G;Th<lTr#VMeYSPZmMVIF"'-I+dB"]""k2'=CXKtcV5n!<
%_j$NHGsu2aAjnA$!/Vr>"-F062Vdj;k&f5F(siO6dt\"[p_0ogdU$W`>@"Nk@`DgsOaB66A?Gs579->4Uj^t^C)N9eW8JMP>+#U/
%o1PK]BjCno=R"lsTae#:'C-=G[PmCkR;3(-d(m.JV`)7RZKi<)i@aU/111LS?/%mh42kS3BZEGC@>bna\kJb?X^4Q_:$(LO9=]dl
%Lsj>sc18$:JU)g:,a$bPdlqVcWbi-=E_]=3fjYp.OS-5ZNWYE[cSbCm@l9XAN-GN5VG=NT!QdkE*&6d)CoE^Qpme-sSoEQ5ggFJ-
%F^!t)lHNR*Ngprs&!cHSNio>oW,:`%.('==kcf0\8:56A.=H\8+qmm7<(5A!K.DX5B30m29i."=!!Dt+n.V!A4-$,?+0[O/#q9R!
%Y+V\[O_?0MaLTtn["Zg]?(BEuRLIHK8Y*FQ4%U3i=15&g2+/eTd+m-h\(RhUEf355DU"!S\N-NNeraC\h!?=-LaYZ`Tq%00Dh^:-
%YbEmJ`1\8[="pEgfOq[apm.nW2;+RL/;6V5c'/j,;?T?]`<IpCNJnoQjl^A9*(rjjk/r@*'[P3:<cE>Mn`B7;CYI=h.A*d0kF8MV
%Tl*WEC_7ZWEcin,cK6e(3H+8A!EQS:!mC3Vm$(eVlM;HeKaP;MGm-q=BYdB`MVGZ7`YQd0@:a6*^kF?4lD>kZ`*/(Yip()k[BEoZ
%an2mB=hg&pGhU;r?uR:TMf]:7fPM4*/lO--j5.nrgf5UIA.dEANhO?HLT]Ia.-ea,Y]LnH<AB&?&EfM#(B=h)RYks`2P^ZKSlRZd
%#qLI3a9\:<0_4Oj.Q;ELVd"/hB4@tuos'1`'f<-QMas4<k"-qp:4@A0bjo6.g'[B[kg=*N&uPA8N^SlhaWa1SA(.T"AEc+/Yk2rY
%5BC(2&>&<Nc"Wd]@?2a_^:c"_8ae]S(TN0\bL8"Q7LPa_da#C><fmZH'$)$dAeE_3heR'EKO?8^AEgK%1PVu?,>@Fn[HbV-X%TIQ
%$;r92A=<.+K&&Or`e'&N1@NkAQQPQkX[7QM'>^-^ph"@0j3t%h[FXD3f5U"21W?):1.G9E\P-'nT/8NL;=q]=9I$UGWn=/66!30>
%D:U7FL1(D[S8Or4:eXR\o'`M7lYl=?h-Y).Pdh>sZQA'dBHa2fI:boXc#g0h[@\U>#?s.E[[\=[G8]eA:2BYB<Pf<2qTcNS-'U*7
%mo$j`$;b+QWYsVq,lh+VdtPg442"S5f?.@#`epIF[,2i>&a?foc1Th$,ID3h6H'/'d2e;_#tR#ak5,C0Bd%%4%5Bf]Xu'p($-@o]
%RdXVBn"ACtTq+4V[SM/1U8Fc"$"Kqg;%6?Q?37+S3NJY-m18855rZ$aPQD.i7lrA`jtB318o]9JId0TH,8_b$gP)`M6#BGVm$j:l
%A1]OjbV%ES("U@fX>9H;JP$rWL%7$ZWC,&Z5XB?0em\c7_`d'$J6uf2K]s?=4AQORd$#BJ&VITY>h.KNge;Z]CAmq8]^4"f3Hq-f
%#-G$h)Di"0a.hJ79P\uY*qV<IgVRZHR4>&#jc?t)`)u.e]/ar2c\^7S)#E?8.c*OD_"h0c>-8t5s'JRgE6E=8,QP',XWC!KKre*l
%01I1KR;ED!FHJ];P-$!6aNheGVU[hA`E.]uUtAc@+L0D4g/:`f&-N[Tku\4*hm^_EW"a*^h.K[&)/S\Ck#.8^"!]iL*R!=ZZ@)O'
%5loC3#QoUQTF7EO.>V>I7>Ihcgf8<-N"&=5Dnr8?70]gsRq%J-fS?VPW_V4QVi#p/Ba8pIT:ROG'E!]iCs]$+$trePRlrD2+Y:H;
%7km%f)`$eo!ZEucE?0h0hQorjj^LU%"?.\"e:FRf4*X=]2=7<ZCRd$a:krCHj'%BH.,RjQKiA2KK>l%P%.41c6nSJ*.qS1Bjd&s,
%A=,_b0/=F\XouR:dRhuI#)GpQb$G'\Nadqs`q1^1CG,<oUTsGj`=c&l5dClK(o^iW?/%9g]:8pp+komYAZBs-D%]Ro<=HT^C:KFh
%"TT)C8XL!$?0XI&QDS3[(5W&GGs]^Kq)`#Id@Htu%;[Jn>T"<YN=ae/\_>8<fT,LV8LG_>cB1;bqp47$l-iP\NhDB$>8^is:"9Eu
%_6c-HCL%#eA]Dg2[&IGlm=E*EHq82&IKq"N44WL/X>iU#q[*lVZ7J,R$:DXR7eg`op%@]@@[Z8u29,purtRYGrM)UFSL0Vc;?":1
%s6ME*.+WiT%>gd[%9mR&J>?l)6j0K)]MW`!(8i<(?Ugm?mV4*[FMgF[V/^4*>Okb0gnsdl_90,O*uQ5pg2m2ta>0i"H=s74e[`/6
%Z/)[V>5BWrX9B;OndUH@i!qH^*pE-k2.I4]*^9o<53tr0])kk?"coeMbjh6k-<6K_UU+QB$!d_H6q,2429IKk<k2dDfun0)V/g%,
%d.*P9U#0>"GP*/I]W2JY6Fo&WIcdl;(baa<C/#=CGgeFpkf/j]rLEX-ke4'ZnPMra\;d$OpBh>e6E5]#Cn<2D(>*CRedH86@_g%6
%mTWG/!*S_?=bhl%C.PR?lZ]-XThl@(@;PKiV?[`2261a&el5?C]i6g$892"F+\b91Jtf_VA1\NB&lh.uD%%[JeMKZ'hdlLK/f45F
%@'W1,=RE/C5[#sd`9:7aq%];9>@Zk1SM7W:aNuU'Xn-'@Q3nn[D?NG%R5Q<^L1-O0'cK>%A.11B@soJGEH"d-q,OmBBqbmnZs3bU
%Rka/,mE=lqNNb!R+ehK-0@Tm)>_5_p27Ffld\7cj=`\P^?leqUD06K`DcT5%/%#re[G$KEXmetJW^<\98;)p;k=0k.,?V][ag.TZ
%>L\uejI^-DZG%e4OPjKGIQ/^j2[Z^T9])/Alm&2AZe8+_q9d_HQ,Nq.Hb7ct04S^q7Z:aY`7$R/LZCW`VO3)(_rR+"Y$t&A$8U9l
%P59\]Y342ZFVleYg!#JK$EfX-+%ncBdrKrjpL>)$&+7>I)HJ,uC+GImgSTD0ellh[b(/_AK%Q[:+N9UXUrnL[\uVspJe%&d`?k^j
%iaE1I0_VH7NU*?[e<g24S't3R%s8NPW=4NV[6H%HHkjhPZsP^^J7(b/1l_]L2QXHQcDT7kM#I#ojS/"6pCC^JAJS4Y$RqZEm+]oU
%KZWqa;lqct[ajf"7*i/B4LM)[IkVP82X=2-mW9=Y6.^4VcS-lF@tP:0]cTW:m;6*8+se#nI!GY%#--MoW-iIUDZlWshg$_X9L1"C
%6-QO[^l"sED!6aMFaakfV)77oU/$GtNS&/+a.l%n%k._&FElP2C?F)&\*unO<Adci?Gl<CQHbpjI#Gk<crCW#2O`+=$?S]'BQ]=_
%nhXM+Ed0])RRK!=BrKN0-(1T0K@O##fSR*qpF@<._$jAa[_N=YUEgR2&34+io6SrKag*8n*;md?]=OL5:F:Zj,K)H.1*2<f4(r$t
%U,C!@__hbY=*)sH600RS1=/9h$NPa3WCR`W,=0?b0sUs]=Ar+3Z9D84r5"8XALdeQ!N&<j@YSE"2O$jmec\E^$c<eJbu%q*%'iQ>
%?tiHhi\9Q+63q=9OGu7[Yd$QH=c3K*lZX"aD027eK8p([Yc\XUKpkpD23sugC^^NZ,j6rDlM]Tj@a?C05q^Tam8NDtR%iuC71H`W
%e&ae\=QEFYKnK*K*>MUu9GHB:\2)79'mlgY0j:`dZN!8=+,mEhm,;RH*O99<+i^b=0X%I,))3]QQ,!s3Nr"\VQStXdr4#]s'*j=8
%"'&VcZ1/8t[BjQ*,#[QtrQR[f%&8`$:!F\'9J/blmqT,#G/An1,]fbOlW!6)iYQsjITYR@I$MVkVjX^2DH^RVl`rk(@kk/eb6M.n
%BHpP8j,_J7gC<YWJdBk4Kl)81F1"!=BjQ.;Rf.dRaHY/%0eA/b]Du(3RJ*j'7btpsA=FNE!9#/a;G8/iFU>8_o*]M.:kr:Uh^]lU
%HtM/B[?`.98!6Su,(b5TFWV'81mkkZn+4Vom>_KRCg&pf7iXDl3p%+JBZCQ,cYZe/Xi\dlG,O)=9sp@^=#G@+[Ts?C/mApR%Or*X
%9k#.$5+j_WB_]:$qmHo_YrH#=luZ`cgTZEsNZ':"m34J^<TDP:rd[Nl8><A/,)B`<1r0X(^mK`6E\TlP[V#2['E+UV/BJ[Scs_$U
%W9s;l+"mD]Rr,*F$16]gf?uSDW0"2K>u[u)'1^J%=]W>.G_^E6V\AMi4Qk1MG9jUKMDloCC;;SG:40aWgB(]O3&3Y7egbe$"!]QB
%:)nQ7BF>5.E?ls%/PPB!@0Oi2r63HbaV#!T=DuS.UD([+VkkW^M6e\\ec9gO*F#B)nDPa&0)WT9KB#*U/_,IUa^O$h3"#.s1t79_
%M>;8PfM+3Q1D`7:KZ`8jV_m[ZiNRLU*\eIk]^WH,n9Mqeikpnlbj"*(;:<r&%-:G5oAW<I5+FT)_V47l#HDCrl,,T?n++AOpTMK#
%$=YDEMPi#0V$gX$N:GlDqd(,-$V)AA)7`Z6s5#C+"N?'JUmn1s(Z)FV2/ctW]HbHQ:D]%*@noC=3"g5[S=]QGJXgR@I5ppW7QPrW
%H?bI*%j,/j4XD^#V3CkD!CHYW"EZ]CdI'f4IP_0K*/`@m/SarL5_.Gr&)K/qF1LcM+-=P!KeKZ@>7$]*`uJg%(nqE$:Bk#Wd=kBG
%#sLI2p:7VUV?b.jhi+IK?Cs?hCGl]`]"$KnaAb*F'-6l5jD)B9*V^P2?L$dk#E!QUl,#B"qX>.4-U(@L>>?Q+Z3Q:N[hHe8g)<eX
%pqS!Kl,9iHf$1=d'8M`-Rg):agT\`:M.7XUS?r$1m')asqX=gA2m5suN\."emlh_7eNCN=:"\!6#^n[QRC8P<+&7/r0g:"FPUkKD
%KKd%)Z/"e3I"<l:o7mj3_M)j3@)INeCs*XfiEc3$/ftQk6:g_,#BKY0)b;'2pKnsgLuO_:90I@U2"9Y5`JN&CgiDR":AXCsEB(/o
%;rUl1<=1\o>_kke9_PQ[65d:4(?3B$a5[u@5#P2R7$J(&3$WM0X/!7<-D_k`IFuN`88H8o_9T/J?#V`M8OjMG/]#Vp$4;;,gM44U
%Uba!HKgX(r*=.gR.X"*&^_4Hs"nR:Zn3qM^$,8%ANqf^C@WRbEA_GK)6"k/D4E,h2Bs4I)6";Xb#ufJWLjcKh3V7nkWKHQr)!j?R
%>lkBO2<87bF_lT(H6>GYRQlQAmuQ#'kFW_-mpV!u>rE<WMNUT:YJ@En[7$P8[OR^gW?uCTP!^HQOLF/H#KY0JNp7%rOA5)JitpH,
%)]b*4?g>NEEXaIAI""beBgoYCEAmt.D6A52(T"$N/:529"@H_C\@HE+^L,#e"AodX-QSpA>AV)_3+b3QY<>O<rQY)qle=OM+.>@;
%qaPgQSuaV9=1#32@l[Mtb?mEAOJRYsW^GeCL+MAO[J(-K7*tN2-cgCQ?gFY$am4fp>"EJC)U]I!+5jP@#MEh?4lLVeOF6H</\d'J
%*6l\sPT!bVH)L-=ok03mF=P8N/K]e)[COm$qH0",=F:l6<e4p"l.Q;/cR(G]+_C@rQ;)Ig*97ib1c$*RAJNXM\a8N"9*ORufWm(6
%RcnOq>lR3KCrbLbTZa,bU1s,&1"JsuW]OsKLUC#slGN68amkBe*TqmmYC(-8X\f7Aa@j[kkpZg4@^g"W^D<<<jOdgFZ.)'$VI`:+
%r$n-RXJlLXP28mKP+`KG0rYiW($.i&+]rIiK+LmQ?1j<,N6Pi,+J2N#q,VBo@S-es+PMQ!c(:>>GmrGX[UN"a9>XB+h0.631kudO
%,q(:$cfq0U>5#A&b]gu`aUU"uM@9HMdX$()V_n`X>L!-cp2e3]^\B[.PNL"\6'Dsk[W:T"#\I:Ob07e5nCjh48Qo@uY"^?9Kh9u[
%6(PKS5bi1D6q9F?l0$B?4:^jTgSmuYl/u-"-!je<39T2NI+V*dZ0ZCI8FG3C*FTdKX'mG[CmGbt[J[$"GSJAFSC?4AoH:4'"g5SI
%hEkdO7m>T;ejSHg<48(N*\LtV</he3<"%p=1o;tt30C.>Y6Tjb)_mMNlkLNn1:Vf%g2/l7$QJX2_>WW,&V%4XfSI:'_KOqB^9X=)
%X%W1^r718E'9BCi[P4J?kuc>l06^cVPMc,T:]hC*.W:"DS]*D]qsa)!2l\/Y$RS4'nXdG_/gg]u8[_+)G1nn+s'K/1,Dn?ZruT0C
%7Qom\Jd&@B$jtL!neMNO0UP]Xd7ij"Qd[!QYP3rGL3@sQ+Z[#VHnP#e,HG4N=[?kXU#A#c*JnnJ+3sQPVN6ZeeY;9H,[Z+]V=\6D
%SVVu!*5t8T6.S>Za?V*B7J9\J7DAcZi*@6o+d.8"7ob-(9ieO,,,K=6dBg56:qqe!3?W87NDaI+FYO=;k>.h(e[B[)GE6*Ig)017
%:]\PF/i0*\a:;0gfFMG@'cO#4mffWd*\A]_EdDPH5;nUj;C#&>Pd"m3HaJOl@$)*Mp^/Q5TrE%sLSiFTBX/YN*d$X*oI([4LW'qL
%D6eKOJR*L/HSNFhAL"^[i23M`eLE$j2$q4M1Co.B.k5Jq10W?(fAiC=;O&!K']:L='e2$C(&6'_WP>9=;*Vd=>9Jn`q"_&[p]^CH
%FB5"LMfG2bA-nR)%9**`Fh;uD<pAeGE<+4,2qp)6@C/D/DY<:Mh1)qi1KNa"IUL>VGi`;_nlTQs&3i@\bXu+Y;A6LB3a:F8DZ6]b
%@1KN6=T<P1HJI+G8/VLj;`>SV2N<*r*h%_6`eIl6!MO(&V\F+k,DB*3U8<[V>:L@rgbHagRS$<>!MX0VRU(giOD2-,n'ASj>"[)D
%T2Ik4TRKET&jF'4(56XjWgu!r1pLGB+s\\")C(]VYEb6H[()o8]fOBmZ;@j50%rG8#c97u-3O(H7$f[L?7TH(84Db(5X\s_mZ5C\
%ftIL[FYImK0VQRe)]4ZM\\u>G%<aE$c>paW@=QS2EP`\2:%ZkU%@V6:('[EsM[).se7n#b,g-e9RWg)n/^,LNRC67V&qL-N-!/7D
%9,ks:1gaf55S]Q.p]d^gL/&HU$Tr09AV)>0`Q&K>!XN:nFU_B<_f@s*S00]d:u<Up&P"RXO.;KJNC@GKh47`5/IAYYl-*(ue*^^h
%^4^tq>s+b@(cY/NcLhJSS_a].EA4d_$S_ksW18R/33LnOKpW6>j&q1pUZ:rHLl!@`oi?m*K=:GULrg=MB-AUPE%Al>+h"O55V9o:
%hP>jm`t)L1R)aDb+XYKAL0GfJS+nPQ*)'mk\\^RQf";`,U/1*g&<gbeDhXPqRs?O&`0&O<fLX&N>qqT@WJmS\(B3h<4P$^X2Y4<f
%F+JC60!Q%Qa6.XQ.BEhOh**>D#PXt=9$Dk"i*.KSN`jA7,pr$\M.S-'o&n7?Q69cck(2kkbWFBT/F8X1kK3a$T;@nXc0VbNPDIb2
%Z4mt.S8#Q,0s;8F=",K#E\#*312j"V3)8A'V3i*I>:-Tf'.84oXV)<1o#IL<F!.0$X2Mr]iHhQC`6mT>XMfeCoNNUgc6S`\,pr74
%4Y&7,**i5imBLJ3.8;<ITkndgSSBJ5FTXtZ;G<U[::F+pS.JKFZ;=_a$+8RC\kHK$K_VYfP:+;n?<B'3^hN%T<b"IaX0nC!@3Blm
%pJm25OC3B8@ff>HLDlmo`U#UB0ej-=e[qGV8#&4urA,EXQW*WQCG@ieT!ar!@_(#uU2R1AqSFKAGs#jsg%Ah[CdW**#e+!]:D852
%E.d\fbr)WBA1OCo130Q"<`cb69Jih6CGF3p3I,&@Ql)($>Xg:l>$@Q+QlP^*OULmETIaTn)H1P1aQZic3Hto-b>ge6I2s)=YfQAl
%O&h,Ej\PF:<%5:S9UO],/B,PL9=Iem)!uc&`Pf]sO&AYFmsL@/@fGOp.438,I?n?jC!:,D50Iqa`#b@q_obi6q)PN0V3mI92J7"+
%lN<Z5JT:7"g.[Mdh*"mpD5Kn.4MaVSB\=`(BUlXSFp0!JIpK29ES/rZm,eGO;h<-3H.]J[\MuC)mCf'*ST[,8lngOX_/NdZ9BpYS
%i0<3U)eD:Kna_4%k;eZR3l0ii$dLg\WV!lT4l/rRi(LF@[j.6Tj1@SbdaibD[<@FQ?.cGhm#>8E,.osja+!-U$Kc9n!,'gr&5J\;
%AH=o>9-g9#J6d!tmY+QTh@+3[[0oCH"jRf*ST#]t/WC*T0I)J^,gAL"&dPm@gMuJ!fEl+P[L>=F130@_R7OjNMl0A:2B5GYbbA)>
%EqMi2g._,('W(,BJrD2V?'C+XM[M#\Ip_JFGZsl0b>7_bMh>PiJ&iMo?Vf%K1h>6;%c[Z@]*SnaJ_7Z)X)`<pp24.K,W,Wt*BSmS
%4#OE=We,@96-kR,S2Wd@PI5HJZ?KPh!bBqiPoRWpF+mh,_$4Ls;RKE4q$k-pEF'I;]+Dsr._!5:itA0%$6"SEjS=-kFg_frhiqtQ
%BHElj+PGg*;BBLY/#nM#Ru7Vs):5Bp.R<W@J0EJCkWCF`72<bT%mi0AJa$<K/VV]*`;oV'%clC!pkt]=4q?<u83Q3#*Z)ma-YW7U
%4!p3h,aQ:#eU_/qR:!&rTucSW`K7kKTBOp8eI=t&%K"QN`^!\N%(jFq.pGcH4u\TsDUsea>"m2hN11_DA-$tR6'qoJm@j@ZJ%C2e
%0gdnMT9`A8^q.i*&]C"M9B3?l#9R2fI9SRM7qJp7(<\G>ZW536?r-R'WJJu72G4d+fr:QDjOt+P_'4p4T_E;18I>JXCpn+5E9ked
%BPA_U2;i'=N%5*M$ft`@07[ATAKYjtcjUZ3*iE7]&^4=:')(u6_pVg*7ME6fF=UXUW#@Z-PY+IfncH!OqaC4H^5#hphAsOP(/F$:
%=))GDESDlHmUpFrB==?I_;-0%F)P[,Gi=h\@]T8:FNj#R,2(=`Bto`fCsl";8)<EZ*^LDdZ,*208D(<<@E5PG%HOer#CES^Z)]c[
%_n5[+FAMf7Y@(di/R'EiHfBG)hTEjLB/0X%J6k+<^0rjVer`E&,'@h4Et0Ht&7^(O$V[Zb*fE(+Yr=f?W_i's0[mhcf2GHLU(.De
%Mpu%nM<hg?&eN_8LU1)a:E/gDP9#hTd?[^9^gSX8"k/"0>=e,.IS_iMf+g+.6s^QPGBN7$nsi8FabItFG/)]m@ij_7EVNf1A/>3]
%8(k',1:)/*]H,&Q!md-u[$T!9AQ1/JKG9$kDgLR'o&X'l:^L=>$W^e/P?n`\jeC"$9G^'BDacE=B7:WZhCTmUE*s*pjbK*;-7l'D
%f&QRlN+J.kf/;o)"O$r+hM6!bJL-5!a+E1&UF;cJG5Z'76s@$`dTR\M'=DRNW_!UQdoeo;i.NkY'Wl>\[@rcQR"hcB[dl_MGY+tn
%$^&#EATO,`2Lr5RYunmj*$Deb#``rD)\V7E(mWla6'@f-C;oJ4EK;Dq[$c963E"8QC`>QHMig_)_mH3t,-b>BU6Q=mPNK+)lp1=L
%W:sbZ*i)C/<B[a/V,W#Cg%Nqa+ra-6B?S?n3'pju_(;L)bN.pbJ?*A]K_I2?:Ng!A`@b]))Nk)+J),n+W]XD'?4S5#6Z%\B*E\i8
%Z@/'$0`=<Ad_-d).\!e`#4kbV8Z%.(5#>U+5nS66&+3'/jrHHPh,'ncMu;r.qbHh(dDX?hgI]aujS.>!)!52XLggrt_LZHi)o8hs
%,OK2FUE(&>bPgtIghkSp'`c;+dM#[Kbn8fda:7H#9O,\$gYN=@B;s3/)@Uf%5Erb\\a$jLHcK_,PD[1K(qSRg1P_6/O!lo,F=TbP
%D\,k$pSfW1Ts1Y9T/hU#^m]!"&M99b:YsH,)`nod@3BU$0G]36_TOjk0&*ka?o#D6c%u(&`uV&4$=Yjm39-P)qAQP.8h\$6Q\S]"
%&+.cO$'#o/If;mH4]A([.#Qk1<^p,e%$)D?7-rKcX&4m,(Q:hld$H1K33h%Q.?]bVq@\"TRC3$+cJCZ-d!WGj"%[+;/f3@N4DZ6E
%A7@_7B[*uD8uDqCkB$oQJ7?!"RTho%b6>o$Pj\:nb7!;5G(09&]R1sNlgQd&,G8'gha[@]2U45LrXk]pB1C-3!\3<jq$Lk5o9Y5j
%jH8;BHOqPAG7>s+A;+G1:D\lRg-`G38R;O:[p+ZPCgZpSmc>\J[@=0K'&fN)_@ma=^0Za,Q]&d22-\+XLI?9A'`tFo]V*_WSu=]l
%-3j!^P&2"IT2$#S-Z+KBSKuJogKI+;AG[j#ceWso,#156VEPX9!__+FO/t>,@S4%VA472]`mkpF\`;^5(ERY[n<3Q^%H[5<3ho`K
%ENXuqNG4lPl6r!>fPM@iT>]I(4M:O4V(pFORSZ5*,GMV<Hhkd@<V+I0ic&TQ2`Fl:WL]Z!Z=<[a0gfrE#k4s,1@'^#a>NH']%nXg
%Aig%Y-LnEZgZ>_j[TCZMX.QIq\_.i8nWT=_G+eHtP83&cc#iK>'c.D3dna#TZ1$X";<p=rrDf&?HuBc>dg:&2pMjS^Q(7`nk2h%G
%%GM\l^UtKpF-s>8nT:.-Ei]V/*YV?l=&,qhZa?i=e)h3RbhB8a!T\2RF#M4dC!n-IAc(UI$)N'?-Vo#Wg<INRT'1?f">t'qccHuh
%BH(K$Sc"da$?*YB+!%PQ?DP7d>-<Y;P?j9P9\J2KqeD`sV>hf&ke:E#<gg*f<XjfhjTlS/\`lHFolcX3cdBdDIW_C.g!"F1,0kGo
%fZV_[D6T.3VgY:RYR>C[EOQ_j%mW/Agsunf"lno,MTGf!W57bX)tXb>X*4K+O@lh8qu._A3Y_o:^]>A(HD&P?9Qk"uok%'@$n.,#
%]Alg*W8#m9Q*P:XES+;!Q1QFiK>b*U(F.H`kAMIq\:7hNW(=\"BnC2q.'EbQqCY>!4@%<ZW#)1kgTpDoE3<;sII&e9fQOO+a!$kE
%kr=U1dhVL0>6h*&4[,MR*t;ra;d&N-C,'15.m>2`(n[_1@YAUc4&lDr'p5YISnA%,MT&r^rZVd8jWqZN$bDOmXOD2.%*PS-GF2/0
%e9<b]ZYk<I52Tre2*br]qM63R\Pd:$`gW>XA48@'W`:q>gU+'Er7S-Rk57CpXH?Oc35s#Y[^KuSXedo'/S<mC>U,ePB3JGD"/tZg
%Nbm<g0Uc9\_>5&fZEq87LA#efok,/rd71]1LggdnJJ#X;@0S8IBgjpF>I1UV<nRHkp2R1>=k!.]YU,Z:f`4^3$=]80OPK6-(!CCn
%Q$lqpe_*>g&t/W)TadY1D?#KY2CGk)D'!(@a`?6b-ICdZ"G3*,enQ.Tp0D>[[h1#.[5HiPCnb5e\-m16eGDQh<nn69F1\k-P9MCG
%G#iZOS_0u)<o!c8DQ1he'EE)-B%ttb\f9p0ZTW7ChGA@3:*?>&"tC3gh8[BT/07!+[5X4q;-*_7WZ!A?5365'2aI8s)rD/9ZO/7u
%!AaCH&1tYJ5)!UXM6[&7lIjGH0RjHYm7Loi^]A2H-CQH_*Y7!P?k!Sg1='4QXJpBJ(me5^J9nH<3m2IJQ$k`Vf&9GjpIQnd`1b=h
%&VO3E!/dNl*f?/Xp%I`u<%m(mEB):=q,nKon<9n)_Q>#;c+DQK.*5o4jBZ-nIiit(7ffa6iHPW`JedBd*,@Dr-@Xmj@@YLQI!N&C
%g?N^S4nYoU@!ed49no+,&a_E_<T^O+ZX%^hdN#]Bo*Vc_7iK(%dqa)dkeiFo8!T^3258X;:uSu#%9U:Pq]bGYE*Ci,.$dG6n]fn,
%>*0;-8[l"drEp!&q7<eK!4[J:a:6AV#DTGZV?Ib#E2j0?jCre.a\;"8`'^aU_q%7-efba/gT=Y7Q7,t?Mrd!t&_ePM"7"n`g2F.s
%r_g#-<^8'VIpBYg[*79.2e!`GG$K:d8rTilI,(A!Zt;C4_qS5mV-SBt;,SrgJY'j0haB@M>G'XR/:=3e9jYWP?OjO+`*^FVKjmOk
%lj=N$BqLVTFr!X))i2.4KjCq7"a18HN4=u9Fq"hP>cmp[FqIR,LW\s-(8-*=l?EsM+kuPL<@g)ImUA1A]o7Y9lT5tEj@=R&`3imk
%!jm)30[BPt#R.hsN&S'3K7f^Nf.0u((;%)1-Y%_'\Sk=qnufJU(:$S9d!'Qbp+^JB&<4!EPM?iV[-Y@aBYB`9kVBl<C_,X)A9p$>
%L3i:Jo6N>'a$3`2/8o/%e=(dkY@jQc<3'iAqcSH8C^'jO#(gSkm37l?h?aq=(-L:k/Q?8eGeBf*8D75/q>flJQ935G"efNg$Js7K
%+"apP[5/Hji,lT17HW5;SlY*Reh+FHGI=ZMZp[S@CLMu.4.jgQ>,9n)k@)uME-Srs7UF`aaj^,MPi]0j098YIkt81@dH;E#m^M,_
%.C>t,Q&@SbS9omNf=&WMEH^3I"EA>fTWEN,f>T=,<s\N0Hjt"!1&lNAMu<)3mM=)u@XF6(c,[5Jq\i3VK>;.<[UY._HDM-6)/8gM
%Yci3Rl@(EWCG>3r@Fs\5DUM0_3(C>6_b45oOSs?\b5o$:)OENXr?F/*m>XXr$c["`.^PULjC`C4\^7EI]9\Y)\IdId,J2/gFK!ms
%Cdhp!DB`i?&H.Lag[:D95:*@$icQk1(O_VqbpH^TG+>9C\ql3OP!5GZ0[Y'CbV[LIldPplmW9&IHFq[\\nC3MH)V0/W]b9CTgI%R
%Aj7N#@W%AW<j9d#Rql0#U*Z4m@OWfNh%S>>>u'UpgZ=IdL(F8Sg`_->DIX=3Wnab$&Wa1-f:^sdWH>2&G_lU,,hMn]O)p?\me?a5
%s7s9V;$,HI#13UhEJTd!p6.pe_/DH1$[uLsjf:VU7"=t.=#SI8cQi?pfmnQ5RdnBJqLGb&Gi9E$dJF`mnV]S=it1-A4ul).p`L:4
%90RVjDt$1FH@*bXi/:_0X[g+[F.^+?&,6Bs7k*]^*rXp`h<^n0eB'qd,eXV^9@V'L9$'jE;SkU=;Mt=<8D+)//lIT'fLS#3*^3I/
%qA;f'?p7=`MY^FH.I,q>Pn3RBP>]iJ:!3J.Z'/'+I/KcSFYT+Yo6hUT1>c=fV+^H?Vc7%7;lLUt+6P,=k.B8<g#kQ5;C[NaZ':^A
%j".%*O0t3Yai@W^i\Fm:9,INC@!\JYXRX;>HD:-m]J,c1d46bnAM\c3iqHj=Q.L,o?=qY4lK'q#W/oc!mIft<;UEC%8kC,F.3%P\
%3T[dGGYU9I5,QdTqSQR99?,"q8jOQVWJJ,&:FYSh4D!uk=ALq&52K5/aP9Xc2LVm'hV]L958F.h0VD<0I2o1"os(0q,CM\Q*'GAW
%WXQOu$^L#>@m^u.(EY+kfYrY=8I$Um#KFfA8p0XnU/KL]N(V@hEML[(F0VLS\E0A>qh6Ej6uO^XPq/-(O"GL23r)Z&l!mD`W/i`7
%6sZmn'_Usm;UEIS.c'FM:0j1cNBNPFr8:AI#(/2)0)1Dno`h&WGi;MJGbI&S<RJr"5#oHP7TE(W3*"Wp*`c8JH?`FYd)2q7hs00$
%AI#cu<Fo!3r2SrDhpraM*37u+GHYh`-[[VF0)1EGQ1,%Al9aB1=&8TNbcp"ak1(,/mZ!<pI'BgF6U(<IV)9>'X:'L;?p3KGQb;jm
%^3"1<j'uB!PEC"dYa:Q=U-;UYMRn%8fmc1t<rT%YS!B]XG#jW]Mk?7:m:0g8U/$_L9);XnQ`-+GQ'*2c<Y=tC[E<GPfieQ%n[6Lj
%nh@LM6[YE+1?i)GXjesFD_"8+S@Ono542J!B,>nF76gTP7F++*Y*=$J\5Lboil\Fqn[REX](X/+W\*f2\Pgqrkc3@piH1@An?BKE
%^A)qY.I(AcV5/n$<F(W?h=YW\Iks]DAU5ZhiHed]?FEq(oM<2&H)$;fQ(fnV=17#,qRT).]WW%B0u$W9_>VN2]%C@=l/I3SYl$H_
%/B)uVYZ*1r$S4_04Kp$n@Y0lkol.`^+*lLHA[8i@?tHc+(h'DO/l#M@I^6i5%!(mTZ4T94=L"/EDHQVDK,mtsg;=FO^Z]-_V5TG"
%<kHGh'!%n^_\4PtfYnOt;&<:b-%0U7,3n-FQ'SuuA)G]CDp5Hop2\2+;(m8I76gTXjc(ks=gl5e+j5o9Z,j3`d_d;&5o5`d'ONo2
%AD'WmRk,k6I'PLW5L(ZM3>\SE<QN-/91]YtX9cD)A`[]5gp5?s/p:A8'aMLT9GIfM/@F'L0h]niQ<BVA*hHLm_T+J``mVa^91^5[
%X:2IoDcVA<_`1:d([%lAP)"0\/[:(T<\1M6H'Y0WmTE0YfOmY&`BPkIFYV7W'q2lld1Z.md8JK17`uGN/j<H2H5L?Fki8J(o+E*F
%>3R+F0.fV@bd9JWio6i3UlV(4-W!#&Bcli*0\"6B(DfTDBY'+u<`J[CVj;7[%]3EDKo<!tIHP+@V<B:6m0!>"``aF(q;eV'lsm/_
%O)a[?;UEHh/*E^5gpIjpA?R:!4oD]C9jJ19pMGI_*a?A7a(.h?+.'*'G8Hb9bu.eo[VCsfN4/'j+/c57G8I<^qSXK<[?[A+1##UU
%`GI,3`l2imrS<92Sm0&qVV<E^jLV1`O6r6fc,Fm"8JgD=5M*r$92Q5c/]T/`G].jud`$T,8K[[Y:Q^%/ho^er-i`Rj[Yk1\!WNE1
%Y+3UUZ/F>M:kaCL#FE-cA&@?c]!u^Y:C]9fb'ij>ML%<#ECE#RS@FgUZ/W(0ID!(ag-<lA9D.doj,3%*40C!%M]\:Fn1iurf=<k]
%A\_P%\W;"!N@S)4Q%LYi[DB\G/'?dZbe9"mO)a==o\j9(("gEn/'W#fkK6):(O%K#II+KWJp@'3`S@s?FD9`^*4cjWZ084Fp[IB=
%=QO#?AN.00F=HH_e,=a*q9#`gkMeYK\oRZ$`N;d1+1n\Gan>/hMPQ/==,s5k3-ODpLEC0^jg_gFG'V<ca0\K:+4i+Uq>/`e.I,pI
%'hJqrY"3juG@a%3XLj(qG^!^?3LG#i,!PF#RIr3+?+GU*`P6cVr6]tPJQM8(E,kBiFTjB5?>@S0&$Nc5cGW@9(Dj:1_W#"a'l2ae
%j1P\UYH5Cj+qH?1fGY8VYNg^pRoapR_9OPI:q6:G.I(C+Q)cDT*51WZ4=n0a"9"]8[BGP&&,8XSHfYG:(MbZm4hSISon/%1Q^;<3
%Eqc0pm82:_IkP4PK.l!Gip`3`)-e`,'_V"kMPuHT=,,>Gj\&GeS$/@Ep@.lAbi]qGmg33XN2a]BZ`fnJp2KoOiG]=>0-u&E^2g!#
%LZ);[*?;ib[4[bPR=ZKO?^]@aVVa>7\8:O_hsU[H&]S1c'HYP,m8jPYY@sMcp\-C&N;<2P?SoMQ3Bl)Fe_kcKJ&Nj](kC]dLEG[Z
%Q4\/B!<7e'Ic1CkXVa5k@(H-Q`<f5c%p!(eb6K]iM-;Lm'E0_(@.o87*LM$Vq"TF%qLL"]0Me$bE!2fsXVSap'265<VI77nY$h&<
%(L&R^I=/lt65O.9FT)MX0OZ&=n9Il0qZ5R3\*M4Dpk+G"(kd/<Jr`9$Dn:2!#VYt48,.`jg*+2jK1kuo?As_]Z\sT7=KeRj0FI-j
%,<ek2&b`I:6e9L4/AaS_@?G\Q$]D6Q?!+\]b:bEp5)/%:`@c'k__Un49Z-F8?ER_!p9G-CVu$1CAN7A^_lE]"c=%=YYmu\nO*=]\
%5MdLZs'Qn6gPoIn_fE_WLOE9CYjq2nT168+,"4e'*5pi/>V*f-Fn$$d%8\Z(ipXq%n!q=J4'@C`m,oZ1ktbo#i,@Dh2uN<KYPc=_
%q"2&q)NJ:k/h]jPUtn/P,4&hiL9R#F=Cdt=`?O[1.i)h@A$PZmQa9ei]r]1schl!n/@^nW=?k-R?S'W##%R%%+,@*,HWc;M$93<i
%7G>jo/>M=g1)=RWS$>LGq2E;Lq&#)[f#qcTZbWIprn$WXX35K<)iM(egK93HbAR5^NqnCl)"7p^nI9@PfC9OS0t(SSp@0/]XI&HZ
%Un+$r&:S+P(>R#Y/77IJ4r.9;pT^ZJQi6\RM;C0@hg(:epG*mZg<G=&KB6Z3(25-<Z3YdpO[\!IM(F);@mq/9-SMb6[?haKdU$g%
%aL^&e7G,_C/AaT*A<lh-,g/`,YU&Pm4*d!3](q_V7G,eKXEMJ&Q7UHJ^1:)'04V:YHT@9il(+otU-P?`aZ:GibfTEI?LD?dp9?!g
%+F<jI*t+iF(1h9NMapp']hHSG-S@#_m27:@Z:K?<P\"%q(mWXCpc+PhPW;m3?WH#C/$.SFQ3DJQ/48(9Z7OFr4NmS%+4IO&a2t^t
%@6`MP8Gi1J<S#4#/Ab0-AJ+X@/k]i(H'^tRa1NraioOJ^BeT@h8A"Y`<Rf.+XInn@@+HrOZ7tTPq089L?FcGj7FoZ$%-]]/ApLGD
%O'/9lN6K_8?;>)M7OK^ml@>(bfm_YqbUh"^EAMBkq:M+[W;H@XeM-k;RRR+D*6f\oASG1Z-Vq(Wg<%ilMa@>L*6n#s^\NXLrV95r
%ic6hRfU@<d\*Hiin/pras7&nbjek?@T3qTgpOBr.hu0H;r:--Rr0KYGp]'d,?iKb;rqP)0r3'JAr8CG$qXZrOiLbVqTBf9[rqMge
%rqarjrlZs%rqbOOr4deJBFFb+GQ7F[s8CjSc2Rsl*/o4~>
%AI9_PrivateDataEnd
